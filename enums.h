/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#ifndef __VK_ENUMS_H__
#define __VK_ENUMS_H__

#include <nan.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include <map>
#include <string>

std::map<std::string, std::string> _API_Extensions_Strings = {
  { "VK_KHR_SURFACE_EXTENSION_NAME", "VK_KHR_surface" },
  { "VK_KHR_SWAPCHAIN_EXTENSION_NAME", "VK_KHR_swapchain" },
  { "VK_KHR_DISPLAY_EXTENSION_NAME", "VK_KHR_display" },
  { "VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME", "VK_KHR_display_swapchain" },
  { "VK_KHR_XLIB_SURFACE_EXTENSION_NAME", "VK_KHR_xlib_surface" },
  { "VK_KHR_XCB_SURFACE_EXTENSION_NAME", "VK_KHR_xcb_surface" },
  { "VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME", "VK_KHR_wayland_surface" },
  { "VK_KHR_MIR_SURFACE_EXTENSION_NAME", "VK_KHR_mir_surface" },
  { "VK_KHR_ANDROID_SURFACE_EXTENSION_NAME", "VK_KHR_android_surface" },
  { "VK_KHR_WIN32_SURFACE_EXTENSION_NAME", "VK_KHR_win32_surface" },
  { "VK_ANDROID_NATIVE_BUFFER_NAME", "VK_ANDROID_native_buffer" },
  { "VK_EXT_DEBUG_REPORT_EXTENSION_NAME", "VK_EXT_debug_report" },
  { "VK_NV_GLSL_SHADER_EXTENSION_NAME", "VK_NV_glsl_shader" },
  { "VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME", "VK_EXT_depth_range_unrestricted" },
  { "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME", "VK_KHR_sampler_mirror_clamp_to_edge" },
  { "VK_IMG_FILTER_CUBIC_EXTENSION_NAME", "VK_IMG_filter_cubic" },
  { "VK_AMD_EXTENSION_17_EXTENSION_NAME", "VK_AMD_extension_17" },
  { "VK_AMD_EXTENSION_18_EXTENSION_NAME", "VK_AMD_extension_18" },
  { "VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME", "VK_AMD_rasterization_order" },
  { "VK_AMD_EXTENSION_20_EXTENSION_NAME", "VK_AMD_extension_20" },
  { "VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME", "VK_AMD_shader_trinary_minmax" },
  { "VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME", "VK_AMD_shader_explicit_vertex_parameter" },
  { "VK_EXT_DEBUG_MARKER_EXTENSION_NAME", "VK_EXT_debug_marker" },
  { "VK_AMD_EXTENSION_24_EXTENSION_NAME", "VK_AMD_extension_24" },
  { "VK_AMD_EXTENSION_25_EXTENSION_NAME", "VK_AMD_extension_25" },
  { "VK_AMD_GCN_SHADER_EXTENSION_NAME", "VK_AMD_gcn_shader" },
  { "VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME", "VK_NV_dedicated_allocation" },
  { "VK_EXT_EXTENSION_28_EXTENSION_NAME", "VK_NV_extension_28" },
  { "VK_NVX_EXTENSION_29_EXTENSION_NAME", "VK_NVX_extension_29" },
  { "VK_NVX_EXTENSION_30_EXTENSION_NAME", "VK_NVX_extension_30" },
  { "VK_NVX_EXTENSION_31_EXTENSION_NAME", "VK_NVX_extension_31" },
  { "VK_AMD_EXTENSION_32_EXTENSION_NAME", "VK_AMD_extension_32" },
  { "VK_AMD_EXTENSION_33_EXTENSION_NAME", "VK_AMD_extension_33" },
  { "VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME", "VK_AMD_draw_indirect_count" },
  { "VK_AMD_EXTENSION_35_EXTENSION_NAME", "VK_AMD_extension_35" },
  { "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME", "VK_AMD_negative_viewport_height" },
  { "VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME", "VK_AMD_gpu_shader_half_float" },
  { "VK_AMD_SHADER_BALLOT_EXTENSION_NAME", "VK_AMD_shader_ballot" },
  { "VK_AMD_EXTENSION_39_EXTENSION_NAME", "VK_AMD_extension_39" },
  { "VK_AMD_EXTENSION_40_EXTENSION_NAME", "VK_AMD_extension_40" },
  { "VK_AMD_EXTENSION_41_EXTENSION_NAME", "VK_AMD_extension_41" },
  { "VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME", "VK_AMD_texture_gather_bias_lod" },
  { "VK_AMD_SHADER_INFO_EXTENSION_NAME", "VK_AMD_shader_info" },
  { "VK_AMD_EXTENSION_44_EXTENSION_NAME", "VK_AMD_extension_44" },
  { "VK_AMD_EXTENSION_45_EXTENSION_NAME", "VK_AMD_extension_45" },
  { "VK_AMD_EXTENSION_46_EXTENSION_NAME", "VK_AMD_extension_46" },
  { "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME", "VK_AMD_shader_image_load_store_lod" },
  { "VK_NVX_EXTENSION_48_EXTENSION_NAME", "VK_NVX_extension_48" },
  { "VK_GOOGLE_EXTENSION_49_EXTENSION_NAME", "VK_GOOGLE_extension_49" },
  { "VK_GOOGLE_EXTENSION_50_EXTENSION_NAME", "VK_GOOGLE_extension_50" },
  { "VK_NVX_EXTENSION_51_EXTENSION_NAME", "VK_NVX_extension_51" },
  { "VK_NVX_EXTENSION_52_EXTENSION_NAME", "VK_NVX_extension_52" },
  { "VK_NV_EXTENSION_53_EXTENSION_NAME", "VK_NV_extension_53" },
  { "VK_KHR_MULTIVIEW_EXTENSION_NAME", "VK_KHR_multiview" },
  { "VK_IMG_FORMAT_PVRTC_EXTENSION_NAME", "VK_IMG_format_pvrtc" },
  { "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME", "VK_NV_external_memory_capabilities" },
  { "VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME", "VK_NV_external_memory" },
  { "VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME", "VK_NV_external_memory_win32" },
  { "VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME", "VK_NV_win32_keyed_mutex" },
  { "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME", "VK_KHR_get_physical_device_properties2" },
  { "VK_KHR_DEVICE_GROUP_EXTENSION_NAME", "VK_KHR_device_group" },
  { "VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME", "VK_EXT_validation_flags" },
  { "VK_NN_VI_SURFACE_EXTENSION_NAME", "VK_NN_vi_surface" },
  { "VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME", "VK_KHR_shader_draw_parameters" },
  { "VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME", "VK_EXT_shader_subgroup_ballot" },
  { "VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME", "VK_EXT_shader_subgroup_vote" },
  { "VK_ARM_EXTENSION_01_EXTENSION_NAME", "VK_ARM_extension_01" },
  { "VK_ARM_EXTENSION_02_EXTENSION_NAME", "VK_ARM_extension_02" },
  { "VK_IMG_EXTENSION_69_EXTENSION_NAME", "VK_IMG_extension_69" },
  { "VK_KHR_MAINTENANCE1_EXTENSION_NAME", "VK_KHR_maintenance1" },
  { "VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME", "VK_KHR_device_group_creation" },
  { "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME", "VK_KHR_external_memory_capabilities" },
  { "VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME", "VK_KHR_external_memory" },
  { "VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME", "VK_KHR_external_memory_win32" },
  { "VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME", "VK_KHR_external_memory_fd" },
  { "VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME", "VK_KHR_win32_keyed_mutex" },
  { "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME", "VK_KHR_external_semaphore_capabilities" },
  { "VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME", "VK_KHR_external_semaphore" },
  { "VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME", "VK_KHR_external_semaphore_win32" },
  { "VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME", "VK_KHR_external_semaphore_fd" },
  { "VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME", "VK_KHR_push_descriptor" },
  { "VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME", "VK_EXT_conditional_rendering" },
  { "VK_KHR_EXTENSION_83_EXTENSION_NAME", "VK_KHR_extension_83" },
  { "VK_KHR_16BIT_STORAGE_EXTENSION_NAME", "VK_KHR_16bit_storage" },
  { "VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME", "VK_KHR_incremental_present" },
  { "VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME", "VK_KHR_descriptor_update_template" },
  { "VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME", "VK_NVX_device_generated_commands" },
  { "VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME", "VK_NV_clip_space_w_scaling" },
  { "VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME", "VK_EXT_direct_mode_display" },
  { "VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME", "VK_EXT_acquire_xlib_display" },
  { "VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME", "VK_EXT_display_surface_counter" },
  { "VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME", "VK_EXT_display_control" },
  { "VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME", "VK_GOOGLE_display_timing" },
  { "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME", "VK_NV_sample_mask_override_coverage" },
  { "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME", "VK_NV_geometry_shader_passthrough" },
  { "VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME", "VK_NV_viewport_array2" },
  { "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME", "VK_NVX_multiview_per_view_attributes" },
  { "VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME", "VK_NV_viewport_swizzle" },
  { "VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME", "VK_EXT_discard_rectangles" },
  { "VK_NV_EXTENSION_101_EXTENSION_NAME", "VK_NV_extension_101" },
  { "VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME", "VK_EXT_conservative_rasterization" },
  { "VK_NV_EXTENSION_103_EXTENSION_NAME", "VK_NV_extension_103" },
  { "VK_NV_EXTENSION_104_EXTENSION_NAME", "VK_NV_extension_104" },
  { "VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME", "VK_EXT_swapchain_colorspace" },
  { "VK_EXT_HDR_METADATA_EXTENSION_NAME", "VK_EXT_hdr_metadata" },
  { "VK_IMG_EXTENSION_107_EXTENSION_NAME", "VK_IMG_extension_107" },
  { "VK_IMG_EXTENSION_108_EXTENSION_NAME", "VK_IMG_extension_108" },
  { "VK_IMG_EXTENSION_109_EXTENSION_NAME", "VK_IMG_extension_109" },
  { "VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME", "VK_KHR_create_renderpass2" },
  { "VK_IMG_EXTENSION_111_EXTENSION_NAME", "VK_IMG_extension_111" },
  { "VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME", "VK_KHR_shared_presentable_image" },
  { "VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME", "VK_KHR_external_fence_capabilities" },
  { "VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME", "VK_KHR_external_fence" },
  { "VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME", "VK_KHR_external_fence_win32" },
  { "VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME", "VK_KHR_external_fence_fd" },
  { "VK_KHR_EXTENSION_117_EXTENSION_NAME", "VK_KHR_extension_117" },
  { "VK_KHR_MAINTENANCE2_EXTENSION_NAME", "VK_KHR_maintenance2" },
  { "VK_KHR_EXTENSION_119_EXTENSION_NAME", "VK_KHR_extension_119" },
  { "VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME", "VK_KHR_get_surface_capabilities2" },
  { "VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME", "VK_KHR_variable_pointers" },
  { "VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME", "VK_KHR_get_display_properties2" },
  { "VK_MVK_IOS_SURFACE_EXTENSION_NAME", "VK_MVK_ios_surface" },
  { "VK_MVK_MACOS_SURFACE_EXTENSION_NAME", "VK_MVK_macos_surface" },
  { "VK_MVK_MOLTENVK_EXTENSION_NAME", "VK_MVK_moltenvk" },
  { "VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME", "VK_EXT_external_memory_dma_buf" },
  { "VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME", "VK_EXT_queue_family_foreign" },
  { "VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME", "VK_KHR_dedicated_allocation" },
  { "VK_EXT_DEBUG_UTILS_EXTENSION_NAME", "VK_EXT_debug_utils" },
  { "VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME", "VK_ANDROID_external_memory_android_hardware_buffer" },
  { "VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME", "VK_EXT_sampler_filter_minmax" },
  { "VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME", "VK_KHR_storage_buffer_storage_class" },
  { "VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME", "VK_AMD_gpu_shader_int16" },
  { "VK_AMD_EXTENSION_134_EXTENSION_NAME", "VK_AMD_extension_134" },
  { "VK_AMD_EXTENSION_135_EXTENSION_NAME", "VK_AMD_extension_135" },
  { "VK_AMD_EXTENSION_136_EXTENSION_NAME", "VK_AMD_extension_136" },
  { "VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME", "VK_AMD_mixed_attachment_samples" },
  { "VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME", "VK_AMD_shader_fragment_mask" },
  { "VK_AMD_EXTENSION_139_EXTENSION_NAME", "VK_AMD_extension_139" },
  { "VK_AMD_EXTENSION_140_EXTENSION_NAME", "VK_AMD_extension_140" },
  { "VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME", "VK_EXT_shader_stencil_export" },
  { "VK_AMD_EXTENSION_142_EXTENSION_NAME", "VK_AMD_extension_142" },
  { "VK_AMD_EXTENSION_143_EXTENSION_NAME", "VK_AMD_extension_143" },
  { "VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME", "VK_EXT_sample_locations" },
  { "VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME", "VK_KHR_relaxed_block_layout" },
  { "VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME", "VK_KHR_get_memory_requirements2" },
  { "VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME", "VK_KHR_image_format_list" },
  { "VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME", "VK_EXT_blend_operation_advanced" },
  { "VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME", "VK_NV_fragment_coverage_to_color" },
  { "VK_NV_EXTENSION_151_EXTENSION_NAME", "VK_NV_extension_151" },
  { "VK_NV_EXTENSION_152_EXTENSION_NAME", "VK_NV_extension_152" },
  { "VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME", "VK_NV_framebuffer_mixed_samples" },
  { "VK_NV_FILL_RECTANGLE_EXTENSION_NAME", "VK_NV_fill_rectangle" },
  { "VK_NV_EXTENSION_155_EXTENSION_NAME", "VK_NV_extension_155" },
  { "VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME", "VK_EXT_post_depth_coverage" },
  { "VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME", "VK_KHR_sampler_ycbcr_conversion" },
  { "VK_KHR_BIND_MEMORY_2_EXTENSION_NAME", "VK_KHR_bind_memory2" },
  { "VK_EXT_EXTENSION_159_EXTENSION_NAME", "VK_EXT_extension_159" },
  { "VK_EXT_EXTENSION_160_EXTENSION_NAME", "VK_EXT_extension_160" },
  { "VK_EXT_VALIDATION_CACHE_EXTENSION_NAME", "VK_EXT_validation_cache" },
  { "VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME", "VK_EXT_descriptor_indexing" },
  { "VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME", "VK_EXT_shader_viewport_index_layer" },
  { "VK_EXT_EXTENSION_164_EXTENSION_NAME", "VK_NV_extension_164" },
  { "VK_EXT_EXTENSION_165_EXTENSION_NAME", "VK_NV_extension_165" },
  { "VK_EXT_EXTENSION_166_EXTENSION_NAME", "VK_NV_extension_166" },
  { "VK_EXT_EXTENSION_167_EXTENSION_NAME", "VK_NV_extension_167" },
  { "VK_EXT_EXTENSION_168_EXTENSION_NAME", "VK_NV_extension_168" },
  { "VK_KHR_MAINTENANCE3_EXTENSION_NAME", "VK_KHR_maintenance3" },
  { "VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME", "VK_KHR_draw_indirect_count" },
  { "VK_QCOM_extension_171_EXTENSION_NAME", "VK_QCOM_extension_171" },
  { "VK_QCOM_extension_172_EXTENSION_NAME", "VK_QCOM_extension_172" },
  { "VK_QCOM_extension_173_EXTENSION_NAME", "VK_QCOM_extension_173" },
  { "VK_QCOM_extension_174_EXTENSION_NAME", "VK_QCOM_extension_174" },
  { "VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME", "VK_EXT_global_priority" },
  { "VK_KHR_EXTENSION_176_EXTENSION_NAME", "VK_KHR_extension_176" },
  { "VK_KHR_EXTENSION_177_EXTENSION_NAME", "VK_KHR_extension_177" },
  { "VK_KHR_8BIT_STORAGE_EXTENSION_NAME", "VK_KHR_8bit_storage" },
  { "VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME", "VK_EXT_external_memory_host" },
  { "VK_AMD_BUFFER_MARKER_EXTENSION_NAME", "VK_AMD_buffer_marker" },
  { "VK_KHR_EXTENSION_181_EXTENSION_NAME", "VK_AMD_extension_181" },
  { "VK_KHR_EXTENSION_182_EXTENSION_NAME", "VK_AMD_extension_182" },
  { "VK_KHR_EXTENSION_183_EXTENSION_NAME", "VK_AMD_extension_183" },
  { "VK_KHR_EXTENSION_184_EXTENSION_NAME", "VK_AMD_extension_184" },
  { "VK_KHR_EXTENSION_185_EXTENSION_NAME", "VK_AMD_extension_185" },
  { "VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME", "VK_AMD_shader_core_properties" },
  { "VK_KHR_EXTENSION_187_EXTENSION_NAME", "VK_AMD_extension_187" },
  { "VK_KHR_EXTENSION_188_EXTENSION_NAME", "VK_AMD_extension_188" },
  { "VK_KHR_EXTENSION_189_EXTENSION_NAME", "VK_AMD_extension_189" },
  { "VK_KHR_EXTENSION_190_EXTENSION_NAME", "VK_AMD_extension_190" },
  { "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME", "VK_EXT_vertex_attribute_divisor" },
  { "VK_GOOGLE_EXTENSION_192_EXTENSION_NAME", "VK_GOOGLE_extension_192" },
  { "VK_GOOGLE_EXTENSION_193_EXTENSION_NAME", "VK_GOOGLE_extension_193" },
  { "VK_GOOGLE_EXTENSION_194_EXTENSION_NAME", "VK_GOOGLE_extension_194" },
  { "VK_GOOGLE_EXTENSION_195_EXTENSION_NAME", "VK_GOOGLE_extension_195" },
  { "VK_GOOGLE_EXTENSION_196_EXTENSION_NAME", "VK_GOOGLE_extension_196" },
  { "VK_EXT_EXTENSION_197_EXTENSION_NAME", "VK_EXT_extension_197" },
  { "VK_ARM_EXTENSION_198_EXTENSION_NAME", "VK_EXT_extension_198" },
  { "VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME", "VK_NV_shader_subgroup_partitioned" },
  { "VK_KHR_EXTENSION_200_EXTENSION_NAME", "VK_KHR_extension_200" },
  { "VK_KHR_EXTENSION_201_EXTENSION_NAME", "VK_KHR_extension_201" },
  { "VK_NV_EXTENSION_202_EXTENSION_NAME", "VK_NV_extension_202" },
  { "VK_NV_EXTENSION_203_EXTENSION_NAME", "VK_NV_extension_203" },
  { "VK_NV_EXTENSION_204_EXTENSION_NAME", "VK_NV_extension_204" },
  { "VK_NV_EXTENSION_205_EXTENSION_NAME", "VK_NV_extension_205" },
  { "VK_NV_EXTENSION_206_EXTENSION_NAME", "VK_NV_extension_206" },
  { "VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME", "VK_NV_device_diagnostic_checkpoints" },
  { "VK_KHR_EXTENSION_208_EXTENSION_NAME", "VK_KHR_extension_208" },
  { "VK_KHR_EXTENSION_209_EXTENSION_NAME", "VK_KHR_extension_209" },
  { "VK_KHR_EXTENSION_210_EXTENSION_NAME", "VK_KHR_extension_210" },
  { "VK_KHR_EXTENSION_211_EXTENSION_NAME", "VK_KHR_extension_211" },
  { "VK_KHR_EXTENSION_212_EXTENSION_NAME", "VK_KHR_extension_212" },
  { "VK_KHR_EXTENSION_213_EXTENSION_NAME", "VK_KHR_extension_213" },
  { "VK_KHR_EXTENSION_214_EXTENSION_NAME", "VK_KHR_extension_214" },
  { "VK_KHR_EXTENSION_215_EXTENSION_NAME", "VK_KHR_extension_215" },
  { "VK_KHR_EXTENSION_216_EXTENSION_NAME", "VK_KHR_extension_216" },
  { "VK_KHR_EXTENSION_217_EXTENSION_NAME", "VK_KHR_extension_217" },
  
};
std::map<std::string, __int32> _API_Extensions = {
  { "VK_KHR_SURFACE_SPEC_VERSION", 25 },
  { "VK_COLORSPACE_SRGB_NONLINEAR_KHR", VK_COLOR_SPACE_SRGB_NONLINEAR_KHR },
  { "VK_KHR_SWAPCHAIN_SPEC_VERSION", 70 },
  { "VK_KHR_DISPLAY_SPEC_VERSION", 21 },
  { "VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION", 9 },
  { "VK_KHR_XLIB_SURFACE_SPEC_VERSION", 6 },
  { "VK_KHR_XCB_SURFACE_SPEC_VERSION", 6 },
  { "VK_KHR_WAYLAND_SURFACE_SPEC_VERSION", 6 },
  { "VK_KHR_MIR_SURFACE_SPEC_VERSION", 4 },
  { "VK_KHR_ANDROID_SURFACE_SPEC_VERSION", 6 },
  { "VK_KHR_WIN32_SURFACE_SPEC_VERSION", 6 },
  { "VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION", 5 },
  { "VK_ANDROID_NATIVE_BUFFER_NUMBER", 11 },
  { "VK_EXT_DEBUG_REPORT_SPEC_VERSION", 9 },
  { "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT", VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT", VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT },
  { "VK_NV_GLSL_SHADER_SPEC_VERSION", 1 },
  { "VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION", 1 },
  { "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION", 1 },
  { "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE", 4 },
  { "VK_IMG_FILTER_CUBIC_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_17_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_18_SPEC_VERSION", 0 },
  { "VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_20_SPEC_VERSION", 0 },
  { "VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION", 1 },
  { "VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION", 1 },
  { "VK_EXT_DEBUG_MARKER_SPEC_VERSION", 4 },
  { "VK_AMD_EXTENSION_24_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_25_SPEC_VERSION", 0 },
  { "VK_AMD_GCN_SHADER_SPEC_VERSION", 1 },
  { "VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION", 1 },
  { "VK_EXT_EXTENSION_28_SPEC_VERSION", 0 },
  { "VK_NVX_EXTENSION_29_SPEC_VERSION", 0 },
  { "VK_NVX_EXTENSION_30_SPEC_VERSION", 0 },
  { "VK_NVX_EXTENSION_31_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_32_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_33_SPEC_VERSION", 0 },
  { "VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_35_SPEC_VERSION", 0 },
  { "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION", 1 },
  { "VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION", 1 },
  { "VK_AMD_SHADER_BALLOT_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_39_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_40_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_41_SPEC_VERSION", 0 },
  { "VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION", 1 },
  { "VK_AMD_SHADER_INFO_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_44_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_45_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_46_SPEC_VERSION", 0 },
  { "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION", 1 },
  { "VK_NVX_EXTENSION_48_SPEC_VERSION", 0 },
  { "VK_GOOGLE_EXTENSION_49_SPEC_VERSION", 0 },
  { "VK_GOOGLE_EXTENSION_50_SPEC_VERSION", 0 },
  { "VK_NVX_EXTENSION_51_SPEC_VERSION", 0 },
  { "VK_NVX_EXTENSION_52_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_53_SPEC_VERSION", 0 },
  { "VK_KHR_MULTIVIEW_SPEC_VERSION", 1 },
  { "VK_IMG_FORMAT_PVRTC_SPEC_VERSION", 1 },
  { "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION", 1 },
  { "VK_NV_EXTERNAL_MEMORY_SPEC_VERSION", 1 },
  { "VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION", 1 },
  { "VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION", 1 },
  { "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION", 1 },
  { "VK_KHR_DEVICE_GROUP_SPEC_VERSION", 3 },
  { "VK_EXT_VALIDATION_FLAGS_SPEC_VERSION", 1 },
  { "VK_NN_VI_SURFACE_SPEC_VERSION", 1 },
  { "VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION", 1 },
  { "VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION", 1 },
  { "VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION", 1 },
  { "VK_ARM_EXTENSION_01_SPEC_VERSION", 0 },
  { "VK_ARM_EXTENSION_02_SPEC_VERSION", 0 },
  { "VK_IMG_EXTENSION_69_SPEC_VERSION", 0 },
  { "VK_KHR_MAINTENANCE1_SPEC_VERSION", 2 },
  { "VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION", 1 },
  { "VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION", 1 },
  { "VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION", 2 },
  { "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR", 1 },
  { "VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION", 1 },
  { "VK_KHR_EXTENSION_83_SPEC_VERSION", 0 },
  { "VK_KHR_16BIT_STORAGE_SPEC_VERSION", 1 },
  { "VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION", 1 },
  { "VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION", 1 },
  { "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR", 1 },
  { "VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION", 3 },
  { "VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION", 1 },
  { "VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION", 1 },
  { "VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION", 1 },
  { "VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION", 1 },
  { "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT", VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT },
  { "VK_EXT_DISPLAY_CONTROL_SPEC_VERSION", 1 },
  { "VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION", 1 },
  { "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION", 1 },
  { "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION", 1 },
  { "VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION", 1 },
  { "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION", 1 },
  { "VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION", 1 },
  { "VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION", 1 },
  { "VK_NV_EXTENSION_101_SPEC_VERSION", 0 },
  { "VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION", 1 },
  { "VK_NV_EXTENSION_103_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_104_SPEC_VERSION", 0 },
  { "VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION", 3 },
  { "VK_EXT_HDR_METADATA_SPEC_VERSION", 1 },
  { "VK_IMG_EXTENSION_107_SPEC_VERSION", 0 },
  { "VK_IMG_EXTENSION_108_SPEC_VERSION", 0 },
  { "VK_IMG_EXTENSION_109_SPEC_VERSION", 0 },
  { "VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION", 1 },
  { "VK_IMG_EXTENSION_111_SPEC_VERSION", 0 },
  { "VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_FENCE_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION", 1 },
  { "VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION", 1 },
  { "VK_KHR_EXTENSION_117_SPEC_VERSION", 0 },
  { "VK_KHR_MAINTENANCE2_SPEC_VERSION", 1 },
  { "VK_KHR_EXTENSION_119_SPEC_VERSION", 0 },
  { "VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION", 1 },
  { "VK_KHR_VARIABLE_POINTERS_SPEC_VERSION", 1 },
  { "VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION", 1 },
  { "VK_MVK_IOS_SURFACE_SPEC_VERSION", 2 },
  { "VK_MVK_MACOS_SURFACE_SPEC_VERSION", 2 },
  { "VK_MVK_MOLTENVK_SPEC_VERSION", 0 },
  { "VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION", 1 },
  { "VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION", 1 },
  { "VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION", 3 },
  { "VK_EXT_DEBUG_UTILS_SPEC_VERSION", 1 },
  { "VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION", 3 },
  { "VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION", 1 },
  { "VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION", 1 },
  { "VK_AMD_GPU_SHADER_INT16_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_134_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_135_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_136_SPEC_VERSION", 0 },
  { "VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION", 1 },
  { "VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_139_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_140_SPEC_VERSION", 0 },
  { "VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION", 1 },
  { "VK_AMD_EXTENSION_142_SPEC_VERSION", 0 },
  { "VK_AMD_EXTENSION_143_SPEC_VERSION", 0 },
  { "VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION", 1 },
  { "VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION", 1 },
  { "VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION", 1 },
  { "VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION", 1 },
  { "VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION", 2 },
  { "VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION", 1 },
  { "VK_NV_EXTENSION_151_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_152_SPEC_VERSION", 0 },
  { "VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION", 1 },
  { "VK_NV_FILL_RECTANGLE_SPEC_VERSION", 1 },
  { "VK_NV_EXTENSION_155_SPEC_VERSION", 0 },
  { "VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION", 1 },
  { "VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION", 1 },
  { "VK_KHR_BIND_MEMORY_2_SPEC_VERSION", 1 },
  { "VK_EXT_EXTENSION_159_SPEC_VERSION", 0 },
  { "VK_EXT_EXTENSION_160_SPEC_VERSION", 0 },
  { "VK_EXT_VALIDATION_CACHE_SPEC_VERSION", 1 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT", VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT },
  { "VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION", 2 },
  { "VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION", 1 },
  { "VK_EXT_EXTENSION_164_SPEC_VERSION", 0 },
  { "VK_EXT_EXTENSION_165_SPEC_VERSION", 0 },
  { "VK_EXT_EXTENSION_166_SPEC_VERSION", 0 },
  { "VK_EXT_EXTENSION_167_SPEC_VERSION", 0 },
  { "VK_EXT_EXTENSION_168_SPEC_VERSION", 0 },
  { "VK_KHR_MAINTENANCE3_SPEC_VERSION", 1 },
  { "VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION", 1 },
  { "VK_QCOM_extension_171_SPEC_VERSION", 0 },
  { "VK_QCOM_extension_172_SPEC_VERSION", 0 },
  { "VK_QCOM_extension_173_SPEC_VERSION", 0 },
  { "VK_QCOM_extension_174_SPEC_VERSION", 0 },
  { "VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION", 2 },
  { "VK_KHR_EXTENSION_176_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_177_SPEC_VERSION", 0 },
  { "VK_KHR_8BIT_STORAGE_SPEC_VERSION", 1 },
  { "VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION", 1 },
  { "VK_AMD_BUFFER_MARKER_SPEC_VERSION", 1 },
  { "VK_KHR_EXTENSION_181_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_182_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_183_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_184_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_185_SPEC_VERSION", 0 },
  { "VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION", 1 },
  { "VK_KHR_EXTENSION_187_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_188_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_189_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_190_SPEC_VERSION", 0 },
  { "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION", 2 },
  { "VK_GOOGLE_EXTENSION_192_SPEC_VERSION", 0 },
  { "VK_GOOGLE_EXTENSION_193_SPEC_VERSION", 0 },
  { "VK_GOOGLE_EXTENSION_194_SPEC_VERSION", 0 },
  { "VK_GOOGLE_EXTENSION_195_SPEC_VERSION", 0 },
  { "VK_GOOGLE_EXTENSION_196_SPEC_VERSION", 0 },
  { "VK_EXT_EXTENSION_197_SPEC_VERSION", 0 },
  { "VK_ARM_EXTENSION_198_SPEC_VERSION", 0 },
  { "VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION", 1 },
  { "VK_KHR_EXTENSION_200_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_201_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_202_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_203_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_204_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_205_SPEC_VERSION", 0 },
  { "VK_NV_EXTENSION_206_SPEC_VERSION", 0 },
  { "VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION", 2 },
  { "VK_KHR_EXTENSION_208_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_209_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_210_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_211_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_212_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_213_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_214_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_215_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_216_SPEC_VERSION", 0 },
  { "VK_KHR_EXTENSION_217_SPEC_VERSION", 0 },
  
};
std::map<std::string, __int32> _API_Constants = {
  { "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE", 256 },
  { "VK_UUID_SIZE", 16 },
  { "VK_LUID_SIZE", 8 },
  { "VK_LUID_SIZE_KHR", (__int32)VK_LUID_SIZE },
  { "VK_MAX_EXTENSION_NAME_SIZE", 256 },
  { "VK_MAX_DESCRIPTION_SIZE", 256 },
  { "VK_MAX_MEMORY_TYPES", 32 },
  { "VK_MAX_MEMORY_HEAPS", 16 },
  { "VK_LOD_CLAMP_NONE", (__int32)1000.0f },
  { "VK_REMAINING_MIP_LEVELS", (__int32)(~0U) },
  { "VK_REMAINING_ARRAY_LAYERS", (__int32)(~0U) },
  { "VK_WHOLE_SIZE", (__int32)(~0ULL) },
  { "VK_ATTACHMENT_UNUSED", (__int32)(~0U) },
  { "VK_TRUE", 1 },
  { "VK_FALSE", 0 },
  { "VK_QUEUE_FAMILY_IGNORED", (__int32)(~0U) },
  { "VK_QUEUE_FAMILY_EXTERNAL", (__int32)(~0U-1) },
  { "VK_QUEUE_FAMILY_EXTERNAL_KHR", (__int32)VK_QUEUE_FAMILY_EXTERNAL },
  { "VK_QUEUE_FAMILY_FOREIGN_EXT", (__int32)(~0U-2) },
  { "VK_SUBPASS_EXTERNAL", (__int32)(~0U) },
  { "VK_MAX_DEVICE_GROUP_SIZE", 32 },
  { "VK_MAX_DEVICE_GROUP_SIZE_KHR", (__int32)VK_MAX_DEVICE_GROUP_SIZE },
  { "VK_NULL_HANDLE", 0 },
  
};
std::map<std::string, __int32> _VkImageLayout = {
  { "VK_IMAGE_LAYOUT_UNDEFINED", 0 },
  { "VK_IMAGE_LAYOUT_GENERAL", 1 },
  { "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL", 2 },
  { "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL", 3 },
  { "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL", 4 },
  { "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL", 5 },
  { "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL", 6 },
  { "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL", 7 },
  { "VK_IMAGE_LAYOUT_PREINITIALIZED", 8 },
  { "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR", 1000001002 },
  { "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR", 1000111000 },
  { "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR", VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL },
  { "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR", VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL },
  
};
std::map<std::string, __int32> _VkAttachmentLoadOp = {
  { "VK_ATTACHMENT_LOAD_OP_LOAD", 0 },
  { "VK_ATTACHMENT_LOAD_OP_CLEAR", 1 },
  { "VK_ATTACHMENT_LOAD_OP_DONT_CARE", 2 },
  
};
std::map<std::string, __int32> _VkAttachmentStoreOp = {
  { "VK_ATTACHMENT_STORE_OP_STORE", 0 },
  { "VK_ATTACHMENT_STORE_OP_DONT_CARE", 1 },
  
};
std::map<std::string, __int32> _VkImageType = {
  { "VK_IMAGE_TYPE_1D", 0 },
  { "VK_IMAGE_TYPE_2D", 1 },
  { "VK_IMAGE_TYPE_3D", 2 },
  
};
std::map<std::string, __int32> _VkImageTiling = {
  { "VK_IMAGE_TILING_OPTIMAL", 0 },
  { "VK_IMAGE_TILING_LINEAR", 1 },
  
};
std::map<std::string, __int32> _VkImageViewType = {
  { "VK_IMAGE_VIEW_TYPE_1D", 0 },
  { "VK_IMAGE_VIEW_TYPE_2D", 1 },
  { "VK_IMAGE_VIEW_TYPE_3D", 2 },
  { "VK_IMAGE_VIEW_TYPE_CUBE", 3 },
  { "VK_IMAGE_VIEW_TYPE_1D_ARRAY", 4 },
  { "VK_IMAGE_VIEW_TYPE_2D_ARRAY", 5 },
  { "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY", 6 },
  
};
std::map<std::string, __int32> _VkCommandBufferLevel = {
  { "VK_COMMAND_BUFFER_LEVEL_PRIMARY", 0 },
  { "VK_COMMAND_BUFFER_LEVEL_SECONDARY", 1 },
  
};
std::map<std::string, __int32> _VkComponentSwizzle = {
  { "VK_COMPONENT_SWIZZLE_IDENTITY", 0 },
  { "VK_COMPONENT_SWIZZLE_ZERO", 1 },
  { "VK_COMPONENT_SWIZZLE_ONE", 2 },
  { "VK_COMPONENT_SWIZZLE_R", 3 },
  { "VK_COMPONENT_SWIZZLE_G", 4 },
  { "VK_COMPONENT_SWIZZLE_B", 5 },
  { "VK_COMPONENT_SWIZZLE_A", 6 },
  
};
std::map<std::string, __int32> _VkDescriptorType = {
  { "VK_DESCRIPTOR_TYPE_SAMPLER", 0 },
  { "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER", 1 },
  { "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE", 2 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE", 3 },
  { "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER", 4 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER", 5 },
  { "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER", 6 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER", 7 },
  { "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC", 8 },
  { "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC", 9 },
  { "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT", 10 },
  
};
std::map<std::string, __int32> _VkQueryType = {
  { "VK_QUERY_TYPE_OCCLUSION", 0 },
  { "VK_QUERY_TYPE_PIPELINE_STATISTICS", 1 },
  { "VK_QUERY_TYPE_TIMESTAMP", 2 },
  
};
std::map<std::string, __int32> _VkBorderColor = {
  { "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK", 0 },
  { "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK", 1 },
  { "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK", 2 },
  { "VK_BORDER_COLOR_INT_OPAQUE_BLACK", 3 },
  { "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE", 4 },
  { "VK_BORDER_COLOR_INT_OPAQUE_WHITE", 5 },
  
};
std::map<std::string, __int32> _VkPipelineBindPoint = {
  { "VK_PIPELINE_BIND_POINT_GRAPHICS", 0 },
  { "VK_PIPELINE_BIND_POINT_COMPUTE", 1 },
  
};
std::map<std::string, __int32> _VkPipelineCacheHeaderVersion = {
  { "VK_PIPELINE_CACHE_HEADER_VERSION_ONE", 1 },
  
};
std::map<std::string, __int32> _VkPrimitiveTopology = {
  { "VK_PRIMITIVE_TOPOLOGY_POINT_LIST", 0 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_LIST", 1 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP", 2 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST", 3 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP", 4 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN", 5 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY", 6 },
  { "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY", 7 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY", 8 },
  { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY", 9 },
  { "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST", 10 },
  
};
std::map<std::string, __int32> _VkSharingMode = {
  { "VK_SHARING_MODE_EXCLUSIVE", 0 },
  { "VK_SHARING_MODE_CONCURRENT", 1 },
  
};
std::map<std::string, __int32> _VkIndexType = {
  { "VK_INDEX_TYPE_UINT16", 0 },
  { "VK_INDEX_TYPE_UINT32", 1 },
  
};
std::map<std::string, __int32> _VkFilter = {
  { "VK_FILTER_NEAREST", 0 },
  { "VK_FILTER_LINEAR", 1 },
  { "VK_FILTER_CUBIC_IMG", 1000015000 },
  
};
std::map<std::string, __int32> _VkSamplerMipmapMode = {
  { "VK_SAMPLER_MIPMAP_MODE_NEAREST", 0 },
  { "VK_SAMPLER_MIPMAP_MODE_LINEAR", 1 },
  
};
std::map<std::string, __int32> _VkSamplerAddressMode = {
  { "VK_SAMPLER_ADDRESS_MODE_REPEAT", 0 },
  { "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT", 1 },
  { "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE", 2 },
  { "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER", 3 },
  
};
std::map<std::string, __int32> _VkCompareOp = {
  { "VK_COMPARE_OP_NEVER", 0 },
  { "VK_COMPARE_OP_LESS", 1 },
  { "VK_COMPARE_OP_EQUAL", 2 },
  { "VK_COMPARE_OP_LESS_OR_EQUAL", 3 },
  { "VK_COMPARE_OP_GREATER", 4 },
  { "VK_COMPARE_OP_NOT_EQUAL", 5 },
  { "VK_COMPARE_OP_GREATER_OR_EQUAL", 6 },
  { "VK_COMPARE_OP_ALWAYS", 7 },
  
};
std::map<std::string, __int32> _VkPolygonMode = {
  { "VK_POLYGON_MODE_FILL", 0 },
  { "VK_POLYGON_MODE_LINE", 1 },
  { "VK_POLYGON_MODE_POINT", 2 },
  { "VK_POLYGON_MODE_FILL_RECTANGLE_NV", 1000153000 },
  
};
std::map<std::string, __int32> _VkFrontFace = {
  { "VK_FRONT_FACE_COUNTER_CLOCKWISE", 0 },
  { "VK_FRONT_FACE_CLOCKWISE", 1 },
  
};
std::map<std::string, __int32> _VkBlendFactor = {
  { "VK_BLEND_FACTOR_ZERO", 0 },
  { "VK_BLEND_FACTOR_ONE", 1 },
  { "VK_BLEND_FACTOR_SRC_COLOR", 2 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR", 3 },
  { "VK_BLEND_FACTOR_DST_COLOR", 4 },
  { "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR", 5 },
  { "VK_BLEND_FACTOR_SRC_ALPHA", 6 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA", 7 },
  { "VK_BLEND_FACTOR_DST_ALPHA", 8 },
  { "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA", 9 },
  { "VK_BLEND_FACTOR_CONSTANT_COLOR", 10 },
  { "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR", 11 },
  { "VK_BLEND_FACTOR_CONSTANT_ALPHA", 12 },
  { "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA", 13 },
  { "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE", 14 },
  { "VK_BLEND_FACTOR_SRC1_COLOR", 15 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR", 16 },
  { "VK_BLEND_FACTOR_SRC1_ALPHA", 17 },
  { "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA", 18 },
  
};
std::map<std::string, __int32> _VkBlendOp = {
  { "VK_BLEND_OP_ADD", 0 },
  { "VK_BLEND_OP_SUBTRACT", 1 },
  { "VK_BLEND_OP_REVERSE_SUBTRACT", 2 },
  { "VK_BLEND_OP_MIN", 3 },
  { "VK_BLEND_OP_MAX", 4 },
  { "VK_BLEND_OP_ZERO_EXT", 1000148000 },
  { "VK_BLEND_OP_SRC_EXT", 1000148001 },
  { "VK_BLEND_OP_DST_EXT", 1000148002 },
  { "VK_BLEND_OP_SRC_OVER_EXT", 1000148003 },
  { "VK_BLEND_OP_DST_OVER_EXT", 1000148004 },
  { "VK_BLEND_OP_SRC_IN_EXT", 1000148005 },
  { "VK_BLEND_OP_DST_IN_EXT", 1000148006 },
  { "VK_BLEND_OP_SRC_OUT_EXT", 1000148007 },
  { "VK_BLEND_OP_DST_OUT_EXT", 1000148008 },
  { "VK_BLEND_OP_SRC_ATOP_EXT", 1000148009 },
  { "VK_BLEND_OP_DST_ATOP_EXT", 1000148010 },
  { "VK_BLEND_OP_XOR_EXT", 1000148011 },
  { "VK_BLEND_OP_MULTIPLY_EXT", 1000148012 },
  { "VK_BLEND_OP_SCREEN_EXT", 1000148013 },
  { "VK_BLEND_OP_OVERLAY_EXT", 1000148014 },
  { "VK_BLEND_OP_DARKEN_EXT", 1000148015 },
  { "VK_BLEND_OP_LIGHTEN_EXT", 1000148016 },
  { "VK_BLEND_OP_COLORDODGE_EXT", 1000148017 },
  { "VK_BLEND_OP_COLORBURN_EXT", 1000148018 },
  { "VK_BLEND_OP_HARDLIGHT_EXT", 1000148019 },
  { "VK_BLEND_OP_SOFTLIGHT_EXT", 1000148020 },
  { "VK_BLEND_OP_DIFFERENCE_EXT", 1000148021 },
  { "VK_BLEND_OP_EXCLUSION_EXT", 1000148022 },
  { "VK_BLEND_OP_INVERT_EXT", 1000148023 },
  { "VK_BLEND_OP_INVERT_RGB_EXT", 1000148024 },
  { "VK_BLEND_OP_LINEARDODGE_EXT", 1000148025 },
  { "VK_BLEND_OP_LINEARBURN_EXT", 1000148026 },
  { "VK_BLEND_OP_VIVIDLIGHT_EXT", 1000148027 },
  { "VK_BLEND_OP_LINEARLIGHT_EXT", 1000148028 },
  { "VK_BLEND_OP_PINLIGHT_EXT", 1000148029 },
  { "VK_BLEND_OP_HARDMIX_EXT", 1000148030 },
  { "VK_BLEND_OP_HSL_HUE_EXT", 1000148031 },
  { "VK_BLEND_OP_HSL_SATURATION_EXT", 1000148032 },
  { "VK_BLEND_OP_HSL_COLOR_EXT", 1000148033 },
  { "VK_BLEND_OP_HSL_LUMINOSITY_EXT", 1000148034 },
  { "VK_BLEND_OP_PLUS_EXT", 1000148035 },
  { "VK_BLEND_OP_PLUS_CLAMPED_EXT", 1000148036 },
  { "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT", 1000148037 },
  { "VK_BLEND_OP_PLUS_DARKER_EXT", 1000148038 },
  { "VK_BLEND_OP_MINUS_EXT", 1000148039 },
  { "VK_BLEND_OP_MINUS_CLAMPED_EXT", 1000148040 },
  { "VK_BLEND_OP_CONTRAST_EXT", 1000148041 },
  { "VK_BLEND_OP_INVERT_OVG_EXT", 1000148042 },
  { "VK_BLEND_OP_RED_EXT", 1000148043 },
  { "VK_BLEND_OP_GREEN_EXT", 1000148044 },
  { "VK_BLEND_OP_BLUE_EXT", 1000148045 },
  
};
std::map<std::string, __int32> _VkStencilOp = {
  { "VK_STENCIL_OP_KEEP", 0 },
  { "VK_STENCIL_OP_ZERO", 1 },
  { "VK_STENCIL_OP_REPLACE", 2 },
  { "VK_STENCIL_OP_INCREMENT_AND_CLAMP", 3 },
  { "VK_STENCIL_OP_DECREMENT_AND_CLAMP", 4 },
  { "VK_STENCIL_OP_INVERT", 5 },
  { "VK_STENCIL_OP_INCREMENT_AND_WRAP", 6 },
  { "VK_STENCIL_OP_DECREMENT_AND_WRAP", 7 },
  
};
std::map<std::string, __int32> _VkLogicOp = {
  { "VK_LOGIC_OP_CLEAR", 0 },
  { "VK_LOGIC_OP_AND", 1 },
  { "VK_LOGIC_OP_AND_REVERSE", 2 },
  { "VK_LOGIC_OP_COPY", 3 },
  { "VK_LOGIC_OP_AND_INVERTED", 4 },
  { "VK_LOGIC_OP_NO_OP", 5 },
  { "VK_LOGIC_OP_XOR", 6 },
  { "VK_LOGIC_OP_OR", 7 },
  { "VK_LOGIC_OP_NOR", 8 },
  { "VK_LOGIC_OP_EQUIVALENT", 9 },
  { "VK_LOGIC_OP_INVERT", 10 },
  { "VK_LOGIC_OP_OR_REVERSE", 11 },
  { "VK_LOGIC_OP_COPY_INVERTED", 12 },
  { "VK_LOGIC_OP_OR_INVERTED", 13 },
  { "VK_LOGIC_OP_NAND", 14 },
  { "VK_LOGIC_OP_SET", 15 },
  
};
std::map<std::string, __int32> _VkInternalAllocationType = {
  { "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE", 0 },
  
};
std::map<std::string, __int32> _VkSystemAllocationScope = {
  { "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND", 0 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT", 1 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_CACHE", 2 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE", 3 },
  { "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE", 4 },
  
};
std::map<std::string, __int32> _VkPhysicalDeviceType = {
  { "VK_PHYSICAL_DEVICE_TYPE_OTHER", 0 },
  { "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU", 1 },
  { "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU", 2 },
  { "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU", 3 },
  { "VK_PHYSICAL_DEVICE_TYPE_CPU", 4 },
  
};
std::map<std::string, __int32> _VkVertexInputRate = {
  { "VK_VERTEX_INPUT_RATE_VERTEX", 0 },
  { "VK_VERTEX_INPUT_RATE_INSTANCE", 1 },
  
};
std::map<std::string, __int32> _VkFormat = {
  { "VK_FORMAT_UNDEFINED", 0 },
  { "VK_FORMAT_R4G4_UNORM_PACK8", 1 },
  { "VK_FORMAT_R4G4B4A4_UNORM_PACK16", 2 },
  { "VK_FORMAT_B4G4R4A4_UNORM_PACK16", 3 },
  { "VK_FORMAT_R5G6B5_UNORM_PACK16", 4 },
  { "VK_FORMAT_B5G6R5_UNORM_PACK16", 5 },
  { "VK_FORMAT_R5G5B5A1_UNORM_PACK16", 6 },
  { "VK_FORMAT_B5G5R5A1_UNORM_PACK16", 7 },
  { "VK_FORMAT_A1R5G5B5_UNORM_PACK16", 8 },
  { "VK_FORMAT_R8_UNORM", 9 },
  { "VK_FORMAT_R8_SNORM", 10 },
  { "VK_FORMAT_R8_USCALED", 11 },
  { "VK_FORMAT_R8_SSCALED", 12 },
  { "VK_FORMAT_R8_UINT", 13 },
  { "VK_FORMAT_R8_SINT", 14 },
  { "VK_FORMAT_R8_SRGB", 15 },
  { "VK_FORMAT_R8G8_UNORM", 16 },
  { "VK_FORMAT_R8G8_SNORM", 17 },
  { "VK_FORMAT_R8G8_USCALED", 18 },
  { "VK_FORMAT_R8G8_SSCALED", 19 },
  { "VK_FORMAT_R8G8_UINT", 20 },
  { "VK_FORMAT_R8G8_SINT", 21 },
  { "VK_FORMAT_R8G8_SRGB", 22 },
  { "VK_FORMAT_R8G8B8_UNORM", 23 },
  { "VK_FORMAT_R8G8B8_SNORM", 24 },
  { "VK_FORMAT_R8G8B8_USCALED", 25 },
  { "VK_FORMAT_R8G8B8_SSCALED", 26 },
  { "VK_FORMAT_R8G8B8_UINT", 27 },
  { "VK_FORMAT_R8G8B8_SINT", 28 },
  { "VK_FORMAT_R8G8B8_SRGB", 29 },
  { "VK_FORMAT_B8G8R8_UNORM", 30 },
  { "VK_FORMAT_B8G8R8_SNORM", 31 },
  { "VK_FORMAT_B8G8R8_USCALED", 32 },
  { "VK_FORMAT_B8G8R8_SSCALED", 33 },
  { "VK_FORMAT_B8G8R8_UINT", 34 },
  { "VK_FORMAT_B8G8R8_SINT", 35 },
  { "VK_FORMAT_B8G8R8_SRGB", 36 },
  { "VK_FORMAT_R8G8B8A8_UNORM", 37 },
  { "VK_FORMAT_R8G8B8A8_SNORM", 38 },
  { "VK_FORMAT_R8G8B8A8_USCALED", 39 },
  { "VK_FORMAT_R8G8B8A8_SSCALED", 40 },
  { "VK_FORMAT_R8G8B8A8_UINT", 41 },
  { "VK_FORMAT_R8G8B8A8_SINT", 42 },
  { "VK_FORMAT_R8G8B8A8_SRGB", 43 },
  { "VK_FORMAT_B8G8R8A8_UNORM", 44 },
  { "VK_FORMAT_B8G8R8A8_SNORM", 45 },
  { "VK_FORMAT_B8G8R8A8_USCALED", 46 },
  { "VK_FORMAT_B8G8R8A8_SSCALED", 47 },
  { "VK_FORMAT_B8G8R8A8_UINT", 48 },
  { "VK_FORMAT_B8G8R8A8_SINT", 49 },
  { "VK_FORMAT_B8G8R8A8_SRGB", 50 },
  { "VK_FORMAT_A8B8G8R8_UNORM_PACK32", 51 },
  { "VK_FORMAT_A8B8G8R8_SNORM_PACK32", 52 },
  { "VK_FORMAT_A8B8G8R8_USCALED_PACK32", 53 },
  { "VK_FORMAT_A8B8G8R8_SSCALED_PACK32", 54 },
  { "VK_FORMAT_A8B8G8R8_UINT_PACK32", 55 },
  { "VK_FORMAT_A8B8G8R8_SINT_PACK32", 56 },
  { "VK_FORMAT_A8B8G8R8_SRGB_PACK32", 57 },
  { "VK_FORMAT_A2R10G10B10_UNORM_PACK32", 58 },
  { "VK_FORMAT_A2R10G10B10_SNORM_PACK32", 59 },
  { "VK_FORMAT_A2R10G10B10_USCALED_PACK32", 60 },
  { "VK_FORMAT_A2R10G10B10_SSCALED_PACK32", 61 },
  { "VK_FORMAT_A2R10G10B10_UINT_PACK32", 62 },
  { "VK_FORMAT_A2R10G10B10_SINT_PACK32", 63 },
  { "VK_FORMAT_A2B10G10R10_UNORM_PACK32", 64 },
  { "VK_FORMAT_A2B10G10R10_SNORM_PACK32", 65 },
  { "VK_FORMAT_A2B10G10R10_USCALED_PACK32", 66 },
  { "VK_FORMAT_A2B10G10R10_SSCALED_PACK32", 67 },
  { "VK_FORMAT_A2B10G10R10_UINT_PACK32", 68 },
  { "VK_FORMAT_A2B10G10R10_SINT_PACK32", 69 },
  { "VK_FORMAT_R16_UNORM", 70 },
  { "VK_FORMAT_R16_SNORM", 71 },
  { "VK_FORMAT_R16_USCALED", 72 },
  { "VK_FORMAT_R16_SSCALED", 73 },
  { "VK_FORMAT_R16_UINT", 74 },
  { "VK_FORMAT_R16_SINT", 75 },
  { "VK_FORMAT_R16_SFLOAT", 76 },
  { "VK_FORMAT_R16G16_UNORM", 77 },
  { "VK_FORMAT_R16G16_SNORM", 78 },
  { "VK_FORMAT_R16G16_USCALED", 79 },
  { "VK_FORMAT_R16G16_SSCALED", 80 },
  { "VK_FORMAT_R16G16_UINT", 81 },
  { "VK_FORMAT_R16G16_SINT", 82 },
  { "VK_FORMAT_R16G16_SFLOAT", 83 },
  { "VK_FORMAT_R16G16B16_UNORM", 84 },
  { "VK_FORMAT_R16G16B16_SNORM", 85 },
  { "VK_FORMAT_R16G16B16_USCALED", 86 },
  { "VK_FORMAT_R16G16B16_SSCALED", 87 },
  { "VK_FORMAT_R16G16B16_UINT", 88 },
  { "VK_FORMAT_R16G16B16_SINT", 89 },
  { "VK_FORMAT_R16G16B16_SFLOAT", 90 },
  { "VK_FORMAT_R16G16B16A16_UNORM", 91 },
  { "VK_FORMAT_R16G16B16A16_SNORM", 92 },
  { "VK_FORMAT_R16G16B16A16_USCALED", 93 },
  { "VK_FORMAT_R16G16B16A16_SSCALED", 94 },
  { "VK_FORMAT_R16G16B16A16_UINT", 95 },
  { "VK_FORMAT_R16G16B16A16_SINT", 96 },
  { "VK_FORMAT_R16G16B16A16_SFLOAT", 97 },
  { "VK_FORMAT_R32_UINT", 98 },
  { "VK_FORMAT_R32_SINT", 99 },
  { "VK_FORMAT_R32_SFLOAT", 100 },
  { "VK_FORMAT_R32G32_UINT", 101 },
  { "VK_FORMAT_R32G32_SINT", 102 },
  { "VK_FORMAT_R32G32_SFLOAT", 103 },
  { "VK_FORMAT_R32G32B32_UINT", 104 },
  { "VK_FORMAT_R32G32B32_SINT", 105 },
  { "VK_FORMAT_R32G32B32_SFLOAT", 106 },
  { "VK_FORMAT_R32G32B32A32_UINT", 107 },
  { "VK_FORMAT_R32G32B32A32_SINT", 108 },
  { "VK_FORMAT_R32G32B32A32_SFLOAT", 109 },
  { "VK_FORMAT_R64_UINT", 110 },
  { "VK_FORMAT_R64_SINT", 111 },
  { "VK_FORMAT_R64_SFLOAT", 112 },
  { "VK_FORMAT_R64G64_UINT", 113 },
  { "VK_FORMAT_R64G64_SINT", 114 },
  { "VK_FORMAT_R64G64_SFLOAT", 115 },
  { "VK_FORMAT_R64G64B64_UINT", 116 },
  { "VK_FORMAT_R64G64B64_SINT", 117 },
  { "VK_FORMAT_R64G64B64_SFLOAT", 118 },
  { "VK_FORMAT_R64G64B64A64_UINT", 119 },
  { "VK_FORMAT_R64G64B64A64_SINT", 120 },
  { "VK_FORMAT_R64G64B64A64_SFLOAT", 121 },
  { "VK_FORMAT_B10G11R11_UFLOAT_PACK32", 122 },
  { "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32", 123 },
  { "VK_FORMAT_D16_UNORM", 124 },
  { "VK_FORMAT_X8_D24_UNORM_PACK32", 125 },
  { "VK_FORMAT_D32_SFLOAT", 126 },
  { "VK_FORMAT_S8_UINT", 127 },
  { "VK_FORMAT_D16_UNORM_S8_UINT", 128 },
  { "VK_FORMAT_D24_UNORM_S8_UINT", 129 },
  { "VK_FORMAT_D32_SFLOAT_S8_UINT", 130 },
  { "VK_FORMAT_BC1_RGB_UNORM_BLOCK", 131 },
  { "VK_FORMAT_BC1_RGB_SRGB_BLOCK", 132 },
  { "VK_FORMAT_BC1_RGBA_UNORM_BLOCK", 133 },
  { "VK_FORMAT_BC1_RGBA_SRGB_BLOCK", 134 },
  { "VK_FORMAT_BC2_UNORM_BLOCK", 135 },
  { "VK_FORMAT_BC2_SRGB_BLOCK", 136 },
  { "VK_FORMAT_BC3_UNORM_BLOCK", 137 },
  { "VK_FORMAT_BC3_SRGB_BLOCK", 138 },
  { "VK_FORMAT_BC4_UNORM_BLOCK", 139 },
  { "VK_FORMAT_BC4_SNORM_BLOCK", 140 },
  { "VK_FORMAT_BC5_UNORM_BLOCK", 141 },
  { "VK_FORMAT_BC5_SNORM_BLOCK", 142 },
  { "VK_FORMAT_BC6H_UFLOAT_BLOCK", 143 },
  { "VK_FORMAT_BC6H_SFLOAT_BLOCK", 144 },
  { "VK_FORMAT_BC7_UNORM_BLOCK", 145 },
  { "VK_FORMAT_BC7_SRGB_BLOCK", 146 },
  { "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK", 147 },
  { "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK", 148 },
  { "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK", 149 },
  { "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK", 150 },
  { "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK", 151 },
  { "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK", 152 },
  { "VK_FORMAT_EAC_R11_UNORM_BLOCK", 153 },
  { "VK_FORMAT_EAC_R11_SNORM_BLOCK", 154 },
  { "VK_FORMAT_EAC_R11G11_UNORM_BLOCK", 155 },
  { "VK_FORMAT_EAC_R11G11_SNORM_BLOCK", 156 },
  { "VK_FORMAT_ASTC_4x4_UNORM_BLOCK", 157 },
  { "VK_FORMAT_ASTC_4x4_SRGB_BLOCK", 158 },
  { "VK_FORMAT_ASTC_5x4_UNORM_BLOCK", 159 },
  { "VK_FORMAT_ASTC_5x4_SRGB_BLOCK", 160 },
  { "VK_FORMAT_ASTC_5x5_UNORM_BLOCK", 161 },
  { "VK_FORMAT_ASTC_5x5_SRGB_BLOCK", 162 },
  { "VK_FORMAT_ASTC_6x5_UNORM_BLOCK", 163 },
  { "VK_FORMAT_ASTC_6x5_SRGB_BLOCK", 164 },
  { "VK_FORMAT_ASTC_6x6_UNORM_BLOCK", 165 },
  { "VK_FORMAT_ASTC_6x6_SRGB_BLOCK", 166 },
  { "VK_FORMAT_ASTC_8x5_UNORM_BLOCK", 167 },
  { "VK_FORMAT_ASTC_8x5_SRGB_BLOCK", 168 },
  { "VK_FORMAT_ASTC_8x6_UNORM_BLOCK", 169 },
  { "VK_FORMAT_ASTC_8x6_SRGB_BLOCK", 170 },
  { "VK_FORMAT_ASTC_8x8_UNORM_BLOCK", 171 },
  { "VK_FORMAT_ASTC_8x8_SRGB_BLOCK", 172 },
  { "VK_FORMAT_ASTC_10x5_UNORM_BLOCK", 173 },
  { "VK_FORMAT_ASTC_10x5_SRGB_BLOCK", 174 },
  { "VK_FORMAT_ASTC_10x6_UNORM_BLOCK", 175 },
  { "VK_FORMAT_ASTC_10x6_SRGB_BLOCK", 176 },
  { "VK_FORMAT_ASTC_10x8_UNORM_BLOCK", 177 },
  { "VK_FORMAT_ASTC_10x8_SRGB_BLOCK", 178 },
  { "VK_FORMAT_ASTC_10x10_UNORM_BLOCK", 179 },
  { "VK_FORMAT_ASTC_10x10_SRGB_BLOCK", 180 },
  { "VK_FORMAT_ASTC_12x10_UNORM_BLOCK", 181 },
  { "VK_FORMAT_ASTC_12x10_SRGB_BLOCK", 182 },
  { "VK_FORMAT_ASTC_12x12_UNORM_BLOCK", 183 },
  { "VK_FORMAT_ASTC_12x12_SRGB_BLOCK", 184 },
  { "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG", 1000054000 },
  { "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG", 1000054001 },
  { "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG", 1000054002 },
  { "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG", 1000054003 },
  { "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG", 1000054004 },
  { "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG", 1000054005 },
  { "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG", 1000054006 },
  { "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG", 1000054007 },
  { "VK_FORMAT_G8B8G8R8_422_UNORM_KHR", VK_FORMAT_G8B8G8R8_422_UNORM },
  { "VK_FORMAT_B8G8R8G8_422_UNORM_KHR", VK_FORMAT_B8G8R8G8_422_UNORM },
  { "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR", VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM },
  { "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR", VK_FORMAT_G8_B8R8_2PLANE_420_UNORM },
  { "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR", VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM },
  { "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR", VK_FORMAT_G8_B8R8_2PLANE_422_UNORM },
  { "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR", VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM },
  { "VK_FORMAT_R10X6_UNORM_PACK16_KHR", VK_FORMAT_R10X6_UNORM_PACK16 },
  { "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR", VK_FORMAT_R10X6G10X6_UNORM_2PACK16 },
  { "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR", VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 },
  { "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR", VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 },
  { "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR", VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 },
  { "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR", VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 },
  { "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR", VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 },
  { "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR", VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 },
  { "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR", VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 },
  { "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR", VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 },
  { "VK_FORMAT_R12X4_UNORM_PACK16_KHR", VK_FORMAT_R12X4_UNORM_PACK16 },
  { "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR", VK_FORMAT_R12X4G12X4_UNORM_2PACK16 },
  { "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR", VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 },
  { "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR", VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 },
  { "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR", VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 },
  { "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR", VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 },
  { "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR", VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 },
  { "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR", VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 },
  { "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR", VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 },
  { "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR", VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 },
  { "VK_FORMAT_G16B16G16R16_422_UNORM_KHR", VK_FORMAT_G16B16G16R16_422_UNORM },
  { "VK_FORMAT_B16G16R16G16_422_UNORM_KHR", VK_FORMAT_B16G16R16G16_422_UNORM },
  { "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR", VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM },
  { "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR", VK_FORMAT_G16_B16R16_2PLANE_420_UNORM },
  { "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR", VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM },
  { "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR", VK_FORMAT_G16_B16R16_2PLANE_422_UNORM },
  { "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR", VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM },
  
};
std::map<std::string, __int32> _VkStructureType = {
  { "VK_STRUCTURE_TYPE_APPLICATION_INFO", 0 },
  { "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO", 1 },
  { "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO", 2 },
  { "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO", 3 },
  { "VK_STRUCTURE_TYPE_SUBMIT_INFO", 4 },
  { "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO", 5 },
  { "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE", 6 },
  { "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO", 7 },
  { "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO", 8 },
  { "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO", 9 },
  { "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO", 10 },
  { "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO", 11 },
  { "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO", 12 },
  { "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO", 13 },
  { "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO", 14 },
  { "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO", 15 },
  { "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO", 16 },
  { "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO", 17 },
  { "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO", 18 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO", 19 },
  { "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO", 20 },
  { "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO", 21 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO", 22 },
  { "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO", 23 },
  { "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO", 24 },
  { "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO", 25 },
  { "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO", 26 },
  { "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO", 27 },
  { "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO", 28 },
  { "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO", 29 },
  { "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO", 30 },
  { "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO", 31 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO", 32 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO", 33 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO", 34 },
  { "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET", 35 },
  { "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET", 36 },
  { "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO", 37 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO", 38 },
  { "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO", 39 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO", 40 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO", 41 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO", 42 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO", 43 },
  { "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER", 44 },
  { "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER", 45 },
  { "VK_STRUCTURE_TYPE_MEMORY_BARRIER", 46 },
  { "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO", 47 },
  { "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO", 48 },
  { "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR", 1000001000 },
  { "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR", 1000001001 },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR", 1000060007 },
  { "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR", 1000060008 },
  { "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR", 1000060009 },
  { "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR", 1000060010 },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR", 1000060011 },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR", 1000060012 },
  { "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR", 1000002000 },
  { "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR", 1000002001 },
  { "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR", 1000003000 },
  { "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR", 1000004000 },
  { "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR", 1000005000 },
  { "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR", 1000006000 },
  { "VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR", 1000007000 },
  { "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR", 1000008000 },
  { "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR", 1000009000 },
  { "VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID", 1000010000 },
  { "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT", 1000011000 },
  { "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD", 1000018000 },
  { "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT", 1000022000 },
  { "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT", 1000022001 },
  { "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT", 1000022002 },
  { "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV", 1000026000 },
  { "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV", 1000026001 },
  { "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV", 1000026002 },
  { "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD", 1000041000 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES },
  { "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV", 1000056000 },
  { "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV", 1000056001 },
  { "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV", 1000057000 },
  { "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV", 1000057001 },
  { "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV", 1000058000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 },
  { "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR", VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 },
  { "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR", VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 },
  { "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR", VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 },
  { "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR", VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 },
  { "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR", VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR", VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR", VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR", VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR", VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO },
  { "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR", VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO },
  { "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR", VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR", 1000060007 },
  { "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR", 1000060008 },
  { "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR", 1000060009 },
  { "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR", 1000060010 },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR", 1000060011 },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR", 1000060012 },
  { "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT", 1000061000 },
  { "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN", 1000062000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES },
  { "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO },
  { "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR", VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO },
  { "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR", VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES },
  { "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR", VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO },
  { "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR", 1000073000 },
  { "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR", 1000073001 },
  { "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR", 1000073002 },
  { "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR", 1000073003 },
  { "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR", 1000074000 },
  { "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR", 1000074001 },
  { "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR", 1000074002 },
  { "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR", 1000075000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO },
  { "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR", VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES },
  { "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR", 1000078000 },
  { "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR", 1000078001 },
  { "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR", 1000078002 },
  { "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR", 1000078003 },
  { "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR", 1000079000 },
  { "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR", 1000079001 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR", 1000080000 },
  { "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT", 1000081000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT", 1000081001 },
  { "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT", 1000081002 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES },
  { "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR", 1000084000 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX", 1000086000 },
  { "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX", 1000086001 },
  { "VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX", 1000086002 },
  { "VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX", 1000086003 },
  { "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX", 1000086004 },
  { "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX", 1000086005 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV", 1000087000 },
  { "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT", 1000090000 },
  { "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT", 1000091000 },
  { "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT", 1000091001 },
  { "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT", 1000091002 },
  { "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT", 1000091003 },
  { "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE", 1000092000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX", 1000097000 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV", 1000098000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT", 1000099000 },
  { "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT", 1000099001 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT", 1000101000 },
  { "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT", 1000101001 },
  { "VK_STRUCTURE_TYPE_HDR_METADATA_EXT", 1000105000 },
  { "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR", 1000109000 },
  { "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR", 1000109001 },
  { "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR", 1000109002 },
  { "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR", 1000109003 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR", 1000109004 },
  { "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR", 1000109005 },
  { "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR", 1000109006 },
  { "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR", 1000111000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO },
  { "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR", VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES },
  { "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR", 1000114000 },
  { "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR", 1000114001 },
  { "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR", 1000114002 },
  { "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR", 1000115000 },
  { "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR", 1000115001 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR", 1000119000 },
  { "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR", 1000119001 },
  { "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR", 1000119002 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES },
  { "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR", 1000121000 },
  { "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR", 1000121001 },
  { "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR", 1000121002 },
  { "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR", 1000121003 },
  { "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR", 1000121004 },
  { "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK", 1000122000 },
  { "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK", 1000123000 },
  { "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR", VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS },
  { "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR", VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO },
  { "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT", 1000128000 },
  { "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT", 1000128001 },
  { "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT", 1000128002 },
  { "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT", 1000128003 },
  { "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT", 1000128004 },
  { "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID", 1000129000 },
  { "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID", 1000129001 },
  { "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID", 1000129002 },
  { "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID", 1000129003 },
  { "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID", 1000129004 },
  { "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID", 1000129005 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT", 1000130000 },
  { "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT", 1000130001 },
  { "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT", 1000143000 },
  { "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT", 1000143001 },
  { "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT", 1000143002 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT", 1000143003 },
  { "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT", 1000143004 },
  { "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR", VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 },
  { "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR", VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 },
  { "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR", VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 },
  { "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR", VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 },
  { "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR", VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 },
  { "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR", 1000147000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT", 1000148000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT", 1000148001 },
  { "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT", 1000148002 },
  { "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV", 1000149000 },
  { "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV", 1000152000 },
  { "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR", VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO },
  { "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR", VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO },
  { "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR", VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO },
  { "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR", VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES },
  { "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR", VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES },
  { "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR", VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO },
  { "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR", VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO },
  { "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT", 1000160000 },
  { "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT", 1000160001 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT", 1000161000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT", 1000161001 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT", 1000161002 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT", 1000161003 },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT", 1000161004 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR", VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES },
  { "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR", VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT },
  { "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT", 1000174000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR", 1000177000 },
  { "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT", 1000178000 },
  { "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT", 1000178001 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT", 1000178002 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD", 1000185000 },
  { "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT", 1000190000 },
  { "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT", 1000190001 },
  { "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV", 1000206000 },
  { "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV", 1000206001 },
  
};
std::map<std::string, __int32> _VkSubpassContents = {
  { "VK_SUBPASS_CONTENTS_INLINE", 0 },
  { "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS", 1 },
  
};
std::map<std::string, __int32> _VkResult = {
  { "VK_SUCCESS", 0 },
  { "VK_NOT_READY", 1 },
  { "VK_TIMEOUT", 2 },
  { "VK_EVENT_SET", 3 },
  { "VK_EVENT_RESET", 4 },
  { "VK_INCOMPLETE", 5 },
  { "VK_ERROR_OUT_OF_HOST_MEMORY", -1 },
  { "VK_ERROR_OUT_OF_DEVICE_MEMORY", -2 },
  { "VK_ERROR_INITIALIZATION_FAILED", -3 },
  { "VK_ERROR_DEVICE_LOST", -4 },
  { "VK_ERROR_MEMORY_MAP_FAILED", -5 },
  { "VK_ERROR_LAYER_NOT_PRESENT", -6 },
  { "VK_ERROR_EXTENSION_NOT_PRESENT", -7 },
  { "VK_ERROR_FEATURE_NOT_PRESENT", -8 },
  { "VK_ERROR_INCOMPATIBLE_DRIVER", -9 },
  { "VK_ERROR_TOO_MANY_OBJECTS", -10 },
  { "VK_ERROR_FORMAT_NOT_SUPPORTED", -11 },
  { "VK_ERROR_FRAGMENTED_POOL", -12 },
  { "VK_ERROR_SURFACE_LOST_KHR", -1000000000 },
  { "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR", -1000000001 },
  { "VK_SUBOPTIMAL_KHR", 1000001003 },
  { "VK_ERROR_OUT_OF_DATE_KHR", -1000001004 },
  { "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR", -1000003001 },
  { "VK_ERROR_VALIDATION_FAILED_EXT", -1000011001 },
  { "VK_ERROR_INVALID_SHADER_NV", -1000012000 },
  { "VK_ERROR_OUT_OF_POOL_MEMORY_KHR", VK_ERROR_OUT_OF_POOL_MEMORY },
  { "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR", VK_ERROR_INVALID_EXTERNAL_HANDLE },
  { "VK_ERROR_FRAGMENTATION_EXT", -1000161000 },
  { "VK_ERROR_NOT_PERMITTED_EXT", -1000174001 },
  
};
std::map<std::string, __int32> _VkDynamicState = {
  { "VK_DYNAMIC_STATE_VIEWPORT", 0 },
  { "VK_DYNAMIC_STATE_SCISSOR", 1 },
  { "VK_DYNAMIC_STATE_LINE_WIDTH", 2 },
  { "VK_DYNAMIC_STATE_DEPTH_BIAS", 3 },
  { "VK_DYNAMIC_STATE_BLEND_CONSTANTS", 4 },
  { "VK_DYNAMIC_STATE_DEPTH_BOUNDS", 5 },
  { "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK", 6 },
  { "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK", 7 },
  { "VK_DYNAMIC_STATE_STENCIL_REFERENCE", 8 },
  { "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV", 1000087000 },
  { "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT", 1000099000 },
  { "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT", 1000143000 },
  
};
std::map<std::string, __int32> _VkDescriptorUpdateTemplateType = {
  { "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET", 0 },
  { "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR", VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET },
  
};
std::map<std::string, __int32> _VkObjectType = {
  { "VK_OBJECT_TYPE_UNKNOWN", 0 },
  { "VK_OBJECT_TYPE_INSTANCE", 1 },
  { "VK_OBJECT_TYPE_PHYSICAL_DEVICE", 2 },
  { "VK_OBJECT_TYPE_DEVICE", 3 },
  { "VK_OBJECT_TYPE_QUEUE", 4 },
  { "VK_OBJECT_TYPE_SEMAPHORE", 5 },
  { "VK_OBJECT_TYPE_COMMAND_BUFFER", 6 },
  { "VK_OBJECT_TYPE_FENCE", 7 },
  { "VK_OBJECT_TYPE_DEVICE_MEMORY", 8 },
  { "VK_OBJECT_TYPE_BUFFER", 9 },
  { "VK_OBJECT_TYPE_IMAGE", 10 },
  { "VK_OBJECT_TYPE_EVENT", 11 },
  { "VK_OBJECT_TYPE_QUERY_POOL", 12 },
  { "VK_OBJECT_TYPE_BUFFER_VIEW", 13 },
  { "VK_OBJECT_TYPE_IMAGE_VIEW", 14 },
  { "VK_OBJECT_TYPE_SHADER_MODULE", 15 },
  { "VK_OBJECT_TYPE_PIPELINE_CACHE", 16 },
  { "VK_OBJECT_TYPE_PIPELINE_LAYOUT", 17 },
  { "VK_OBJECT_TYPE_RENDER_PASS", 18 },
  { "VK_OBJECT_TYPE_PIPELINE", 19 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT", 20 },
  { "VK_OBJECT_TYPE_SAMPLER", 21 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_POOL", 22 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_SET", 23 },
  { "VK_OBJECT_TYPE_FRAMEBUFFER", 24 },
  { "VK_OBJECT_TYPE_COMMAND_POOL", 25 },
  { "VK_OBJECT_TYPE_SURFACE_KHR", 1000000000 },
  { "VK_OBJECT_TYPE_SWAPCHAIN_KHR", 1000001000 },
  { "VK_OBJECT_TYPE_DISPLAY_KHR", 1000002000 },
  { "VK_OBJECT_TYPE_DISPLAY_MODE_KHR", 1000002001 },
  { "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT", 1000011000 },
  { "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR", VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE },
  { "VK_OBJECT_TYPE_OBJECT_TABLE_NVX", 1000086000 },
  { "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX", 1000086001 },
  { "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT", 1000128000 },
  { "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR", VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION },
  { "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT", 1000160000 },
  
};
std::map<std::string, __int32> _VkPresentModeKHR = {
  { "VK_PRESENT_MODE_IMMEDIATE_KHR", 0 },
  { "VK_PRESENT_MODE_MAILBOX_KHR", 1 },
  { "VK_PRESENT_MODE_FIFO_KHR", 2 },
  { "VK_PRESENT_MODE_FIFO_RELAXED_KHR", 3 },
  { "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR", 1000111000 },
  { "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR", 1000111001 },
  
};
std::map<std::string, __int32> _VkColorSpaceKHR = {
  { "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR", 0 },
  { "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT", 1000104001 },
  { "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT", 1000104002 },
  { "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT", 1000104003 },
  { "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT", 1000104004 },
  { "VK_COLOR_SPACE_BT709_LINEAR_EXT", 1000104005 },
  { "VK_COLOR_SPACE_BT709_NONLINEAR_EXT", 1000104006 },
  { "VK_COLOR_SPACE_BT2020_LINEAR_EXT", 1000104007 },
  { "VK_COLOR_SPACE_HDR10_ST2084_EXT", 1000104008 },
  { "VK_COLOR_SPACE_DOLBYVISION_EXT", 1000104009 },
  { "VK_COLOR_SPACE_HDR10_HLG_EXT", 1000104010 },
  { "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT", 1000104011 },
  { "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT", 1000104012 },
  { "VK_COLOR_SPACE_PASS_THROUGH_EXT", 1000104013 },
  { "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT", 1000104014 },
  
};
std::map<std::string, __int32> _VkDebugReportObjectTypeEXT = {
  { "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT", 0 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT", 1 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT", 2 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT", 3 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT", 4 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT", 5 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT", 6 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT", 7 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT", 8 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT", 9 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT", 10 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT", 11 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT", 12 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT", 13 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT", 14 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT", 15 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT", 16 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT", 17 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT", 18 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT", 19 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT", 20 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT", 21 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT", 22 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT", 23 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT", 24 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT", 25 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT", 26 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT", 27 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT", 28 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT", 29 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT", 30 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT", 31 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT", 32 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT", 33 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT", 1000156000 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT", 1000085000 },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT", VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT", VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT },
  { "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT", 1000156000 },
  
};
std::map<std::string, __int32> _VkRasterizationOrderAMD = {
  { "VK_RASTERIZATION_ORDER_STRICT_AMD", 0 },
  { "VK_RASTERIZATION_ORDER_RELAXED_AMD", 1 },
  
};
std::map<std::string, __int32> _VkValidationCheckEXT = {
  { "VK_VALIDATION_CHECK_ALL_EXT", 0 },
  { "VK_VALIDATION_CHECK_SHADERS_EXT", 1 },
  
};
std::map<std::string, __int32> _VkIndirectCommandsTokenTypeNVX = {
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX", 0 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX", 1 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX", 2 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX", 3 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX", 4 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX", 5 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX", 6 },
  { "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX", 7 },
  
};
std::map<std::string, __int32> _VkObjectEntryTypeNVX = {
  { "VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX", 0 },
  { "VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX", 1 },
  { "VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX", 2 },
  { "VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX", 3 },
  { "VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX", 4 },
  
};
std::map<std::string, __int32> _VkDisplayPowerStateEXT = {
  { "VK_DISPLAY_POWER_STATE_OFF_EXT", 0 },
  { "VK_DISPLAY_POWER_STATE_SUSPEND_EXT", 1 },
  { "VK_DISPLAY_POWER_STATE_ON_EXT", 2 },
  
};
std::map<std::string, __int32> _VkDeviceEventTypeEXT = {
  { "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT", 0 },
  
};
std::map<std::string, __int32> _VkDisplayEventTypeEXT = {
  { "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT", 0 },
  
};
std::map<std::string, __int32> _VkViewportCoordinateSwizzleNV = {
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV", 0 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV", 1 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV", 2 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV", 3 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV", 4 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV", 5 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV", 6 },
  { "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV", 7 },
  
};
std::map<std::string, __int32> _VkDiscardRectangleModeEXT = {
  { "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT", 0 },
  { "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT", 1 },
  
};
std::map<std::string, __int32> _VkPointClippingBehavior = {
  { "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES", 0 },
  { "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY", 1 },
  { "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR", VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES },
  { "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR", VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY },
  
};
std::map<std::string, __int32> _VkSamplerReductionModeEXT = {
  { "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT", 0 },
  { "VK_SAMPLER_REDUCTION_MODE_MIN_EXT", 1 },
  { "VK_SAMPLER_REDUCTION_MODE_MAX_EXT", 2 },
  
};
std::map<std::string, __int32> _VkTessellationDomainOrigin = {
  { "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT", 0 },
  { "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT", 1 },
  { "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR", VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT },
  { "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR", VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT },
  
};
std::map<std::string, __int32> _VkSamplerYcbcrModelConversion = {
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY", 0 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY", 1 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709", 2 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601", 3 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020", 4 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR", VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR", VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR", VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR", VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 },
  { "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR", VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 },
  
};
std::map<std::string, __int32> _VkSamplerYcbcrRange = {
  { "VK_SAMPLER_YCBCR_RANGE_ITU_FULL", 0 },
  { "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW", 1 },
  { "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR", VK_SAMPLER_YCBCR_RANGE_ITU_FULL },
  { "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR", VK_SAMPLER_YCBCR_RANGE_ITU_NARROW },
  
};
std::map<std::string, __int32> _VkChromaLocation = {
  { "VK_CHROMA_LOCATION_COSITED_EVEN", 0 },
  { "VK_CHROMA_LOCATION_MIDPOINT", 1 },
  { "VK_CHROMA_LOCATION_COSITED_EVEN_KHR", VK_CHROMA_LOCATION_COSITED_EVEN },
  { "VK_CHROMA_LOCATION_MIDPOINT_KHR", VK_CHROMA_LOCATION_MIDPOINT },
  
};
std::map<std::string, __int32> _VkBlendOverlapEXT = {
  { "VK_BLEND_OVERLAP_UNCORRELATED_EXT", 0 },
  { "VK_BLEND_OVERLAP_DISJOINT_EXT", 1 },
  { "VK_BLEND_OVERLAP_CONJOINT_EXT", 2 },
  
};
std::map<std::string, __int32> _VkCoverageModulationModeNV = {
  { "VK_COVERAGE_MODULATION_MODE_NONE_NV", 0 },
  { "VK_COVERAGE_MODULATION_MODE_RGB_NV", 1 },
  { "VK_COVERAGE_MODULATION_MODE_ALPHA_NV", 2 },
  { "VK_COVERAGE_MODULATION_MODE_RGBA_NV", 3 },
  
};
std::map<std::string, __int32> _VkValidationCacheHeaderVersionEXT = {
  { "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT", 1 },
  
};
std::map<std::string, __int32> _VkShaderInfoTypeAMD = {
  { "VK_SHADER_INFO_TYPE_STATISTICS_AMD", 0 },
  { "VK_SHADER_INFO_TYPE_BINARY_AMD", 1 },
  { "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD", 2 },
  
};
std::map<std::string, __int32> _VkQueueGlobalPriorityEXT = {
  { "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT", 128 },
  { "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT", 256 },
  { "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT", 512 },
  { "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT", 1024 },
  
};
std::map<std::string, __int32> _VkConservativeRasterizationModeEXT = {
  { "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT", 0 },
  { "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT", 1 },
  { "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT", 2 },
  
};
std::map<std::string, __int32> _VkVendorId = {
  { "VK_VENDOR_ID_VIV", 0x10001 },
  { "VK_VENDOR_ID_VSI", 0x10002 },
  { "VK_VENDOR_ID_KAZAN", 0x10003 },
  
};
std::map<std::string, __int32> _VkCullModeFlagBits = {
  { "VK_CULL_MODE_NONE", 0 },
  { "VK_CULL_MODE_FRONT_BIT", 0x1 },
  { "VK_CULL_MODE_BACK_BIT", 0x2 },
  { "VK_CULL_MODE_FRONT_AND_BACK", 0x00000003 },
  
};
std::map<std::string, __int32> _VkQueueFlagBits = {
  { "VK_QUEUE_GRAPHICS_BIT", 0x1 },
  { "VK_QUEUE_COMPUTE_BIT", 0x2 },
  { "VK_QUEUE_TRANSFER_BIT", 0x4 },
  { "VK_QUEUE_SPARSE_BINDING_BIT", 0x8 },
  
};
std::map<std::string, __int32> _VkDeviceQueueCreateFlagBits = {
  
};
std::map<std::string, __int32> _VkMemoryPropertyFlagBits = {
  { "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT", 0x1 },
  { "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT", 0x2 },
  { "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT", 0x4 },
  { "VK_MEMORY_PROPERTY_HOST_CACHED_BIT", 0x8 },
  { "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT", 0x10 },
  
};
std::map<std::string, __int32> _VkMemoryHeapFlagBits = {
  { "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT", 0x1 },
  { "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR", VK_MEMORY_HEAP_MULTI_INSTANCE_BIT },
  
};
std::map<std::string, __int32> _VkAccessFlagBits = {
  { "VK_ACCESS_INDIRECT_COMMAND_READ_BIT", 0x1 },
  { "VK_ACCESS_INDEX_READ_BIT", 0x2 },
  { "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT", 0x4 },
  { "VK_ACCESS_UNIFORM_READ_BIT", 0x8 },
  { "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT", 0x10 },
  { "VK_ACCESS_SHADER_READ_BIT", 0x20 },
  { "VK_ACCESS_SHADER_WRITE_BIT", 0x40 },
  { "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT", 0x80 },
  { "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT", 0x100 },
  { "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT", 0x200 },
  { "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT", 0x400 },
  { "VK_ACCESS_TRANSFER_READ_BIT", 0x800 },
  { "VK_ACCESS_TRANSFER_WRITE_BIT", 0x1000 },
  { "VK_ACCESS_HOST_READ_BIT", 0x2000 },
  { "VK_ACCESS_HOST_WRITE_BIT", 0x4000 },
  { "VK_ACCESS_MEMORY_READ_BIT", 0x8000 },
  { "VK_ACCESS_MEMORY_WRITE_BIT", 0x10000 },
  { "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT", 0x100000 },
  { "VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX", 0x20000 },
  { "VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX", 0x40000 },
  { "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT", 0x80000 },
  
};
std::map<std::string, __int32> _VkBufferUsageFlagBits = {
  { "VK_BUFFER_USAGE_TRANSFER_SRC_BIT", 0x1 },
  { "VK_BUFFER_USAGE_TRANSFER_DST_BIT", 0x2 },
  { "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT", 0x4 },
  { "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT", 0x8 },
  { "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT", 0x10 },
  { "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT", 0x20 },
  { "VK_BUFFER_USAGE_INDEX_BUFFER_BIT", 0x40 },
  { "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT", 0x80 },
  { "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT", 0x100 },
  { "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT", 0x200 },
  
};
std::map<std::string, __int32> _VkBufferCreateFlagBits = {
  { "VK_BUFFER_CREATE_SPARSE_BINDING_BIT", 0x1 },
  { "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT", 0x2 },
  { "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT", 0x4 },
  
};
std::map<std::string, __int32> _VkShaderStageFlagBits = {
  { "VK_SHADER_STAGE_VERTEX_BIT", 0x1 },
  { "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT", 0x2 },
  { "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT", 0x4 },
  { "VK_SHADER_STAGE_GEOMETRY_BIT", 0x8 },
  { "VK_SHADER_STAGE_FRAGMENT_BIT", 0x10 },
  { "VK_SHADER_STAGE_COMPUTE_BIT", 0x20 },
  { "VK_SHADER_STAGE_ALL_GRAPHICS", 0x0000001F },
  { "VK_SHADER_STAGE_ALL", 0x7FFFFFFF },
  
};
std::map<std::string, __int32> _VkImageUsageFlagBits = {
  { "VK_IMAGE_USAGE_TRANSFER_SRC_BIT", 0x1 },
  { "VK_IMAGE_USAGE_TRANSFER_DST_BIT", 0x2 },
  { "VK_IMAGE_USAGE_SAMPLED_BIT", 0x4 },
  { "VK_IMAGE_USAGE_STORAGE_BIT", 0x8 },
  { "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT", 0x10 },
  { "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT", 0x20 },
  { "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT", 0x40 },
  { "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT", 0x80 },
  
};
std::map<std::string, __int32> _VkImageCreateFlagBits = {
  { "VK_IMAGE_CREATE_SPARSE_BINDING_BIT", 0x1 },
  { "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT", 0x2 },
  { "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT", 0x4 },
  { "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT", 0x8 },
  { "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT", 0x10 },
  { "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT },
  { "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR", VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT },
  { "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR", VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT },
  { "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR", VK_IMAGE_CREATE_EXTENDED_USAGE_BIT },
  { "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT", 0x1000 },
  { "VK_IMAGE_CREATE_DISJOINT_BIT_KHR", VK_IMAGE_CREATE_DISJOINT_BIT },
  { "VK_IMAGE_CREATE_ALIAS_BIT_KHR", VK_IMAGE_CREATE_ALIAS_BIT },
  
};
std::map<std::string, __int32> _VkPipelineCreateFlagBits = {
  { "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT", 0x1 },
  { "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT", 0x2 },
  { "VK_PIPELINE_CREATE_DERIVATIVE_BIT", 0x4 },
  { "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR", VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT },
  { "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR", VK_PIPELINE_CREATE_DISPATCH_BASE },
  
};
std::map<std::string, __int32> _VkColorComponentFlagBits = {
  { "VK_COLOR_COMPONENT_R_BIT", 0x1 },
  { "VK_COLOR_COMPONENT_G_BIT", 0x2 },
  { "VK_COLOR_COMPONENT_B_BIT", 0x4 },
  { "VK_COLOR_COMPONENT_A_BIT", 0x8 },
  
};
std::map<std::string, __int32> _VkFenceCreateFlagBits = {
  { "VK_FENCE_CREATE_SIGNALED_BIT", 0x1 },
  
};
std::map<std::string, __int32> _VkFormatFeatureFlagBits = {
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT", 0x1 },
  { "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT", 0x2 },
  { "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT", 0x4 },
  { "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT", 0x8 },
  { "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT", 0x10 },
  { "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT", 0x20 },
  { "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT", 0x40 },
  { "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT", 0x80 },
  { "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT", 0x100 },
  { "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT", 0x200 },
  { "VK_FORMAT_FEATURE_BLIT_SRC_BIT", 0x400 },
  { "VK_FORMAT_FEATURE_BLIT_DST_BIT", 0x800 },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT", 0x1000 },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG", 0x2000 },
  { "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR", VK_FORMAT_FEATURE_TRANSFER_SRC_BIT },
  { "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR", VK_FORMAT_FEATURE_TRANSFER_DST_BIT },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT", 0x10000 },
  { "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR", VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR", VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR", VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR", VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT },
  { "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR", VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT },
  { "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR", VK_FORMAT_FEATURE_DISJOINT_BIT },
  { "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR", VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT },
  
};
std::map<std::string, __int32> _VkQueryControlFlagBits = {
  { "VK_QUERY_CONTROL_PRECISE_BIT", 0x1 },
  
};
std::map<std::string, __int32> _VkQueryResultFlagBits = {
  { "VK_QUERY_RESULT_64_BIT", 0x1 },
  { "VK_QUERY_RESULT_WAIT_BIT", 0x2 },
  { "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT", 0x4 },
  { "VK_QUERY_RESULT_PARTIAL_BIT", 0x8 },
  
};
std::map<std::string, __int32> _VkCommandBufferUsageFlagBits = {
  { "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT", 0x1 },
  { "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT", 0x2 },
  { "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT", 0x4 },
  
};
std::map<std::string, __int32> _VkQueryPipelineStatisticFlagBits = {
  { "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT", 0x1 },
  { "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT", 0x2 },
  { "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT", 0x4 },
  { "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT", 0x8 },
  { "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT", 0x10 },
  { "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT", 0x20 },
  { "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT", 0x40 },
  { "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT", 0x80 },
  { "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT", 0x100 },
  { "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT", 0x200 },
  { "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT", 0x400 },
  
};
std::map<std::string, __int32> _VkImageAspectFlagBits = {
  { "VK_IMAGE_ASPECT_COLOR_BIT", 0x1 },
  { "VK_IMAGE_ASPECT_DEPTH_BIT", 0x2 },
  { "VK_IMAGE_ASPECT_STENCIL_BIT", 0x4 },
  { "VK_IMAGE_ASPECT_METADATA_BIT", 0x8 },
  { "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR", VK_IMAGE_ASPECT_PLANE_0_BIT },
  { "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR", VK_IMAGE_ASPECT_PLANE_1_BIT },
  { "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR", VK_IMAGE_ASPECT_PLANE_2_BIT },
  
};
std::map<std::string, __int32> _VkSparseImageFormatFlagBits = {
  { "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT", 0x1 },
  { "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT", 0x2 },
  { "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT", 0x4 },
  
};
std::map<std::string, __int32> _VkSparseMemoryBindFlagBits = {
  { "VK_SPARSE_MEMORY_BIND_METADATA_BIT", 0x1 },
  
};
std::map<std::string, __int32> _VkPipelineStageFlagBits = {
  { "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT", 0x1 },
  { "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT", 0x2 },
  { "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT", 0x4 },
  { "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT", 0x8 },
  { "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT", 0x10 },
  { "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT", 0x20 },
  { "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT", 0x40 },
  { "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT", 0x80 },
  { "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT", 0x100 },
  { "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT", 0x200 },
  { "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT", 0x400 },
  { "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT", 0x800 },
  { "VK_PIPELINE_STAGE_TRANSFER_BIT", 0x1000 },
  { "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT", 0x2000 },
  { "VK_PIPELINE_STAGE_HOST_BIT", 0x4000 },
  { "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT", 0x8000 },
  { "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT", 0x10000 },
  { "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT", 0x40000 },
  { "VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX", 0x20000 },
  
};
std::map<std::string, __int32> _VkCommandPoolCreateFlagBits = {
  { "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT", 0x1 },
  { "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT", 0x2 },
  
};
std::map<std::string, __int32> _VkCommandPoolResetFlagBits = {
  { "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT", 0x1 },
  
};
std::map<std::string, __int32> _VkCommandBufferResetFlagBits = {
  { "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT", 0x1 },
  
};
std::map<std::string, __int32> _VkSampleCountFlagBits = {
  { "VK_SAMPLE_COUNT_1_BIT", 0x1 },
  { "VK_SAMPLE_COUNT_2_BIT", 0x2 },
  { "VK_SAMPLE_COUNT_4_BIT", 0x4 },
  { "VK_SAMPLE_COUNT_8_BIT", 0x8 },
  { "VK_SAMPLE_COUNT_16_BIT", 0x10 },
  { "VK_SAMPLE_COUNT_32_BIT", 0x20 },
  { "VK_SAMPLE_COUNT_64_BIT", 0x40 },
  
};
std::map<std::string, __int32> _VkAttachmentDescriptionFlagBits = {
  { "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT", 0x1 },
  
};
std::map<std::string, __int32> _VkStencilFaceFlagBits = {
  { "VK_STENCIL_FACE_FRONT_BIT", 0x1 },
  { "VK_STENCIL_FACE_BACK_BIT", 0x2 },
  { "VK_STENCIL_FRONT_AND_BACK", 0x00000003 },
  
};
std::map<std::string, __int32> _VkDescriptorPoolCreateFlagBits = {
  { "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT", 0x1 },
  { "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT", 0x2 },
  
};
std::map<std::string, __int32> _VkDependencyFlagBits = {
  { "VK_DEPENDENCY_BY_REGION_BIT", 0x1 },
  { "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR", VK_DEPENDENCY_VIEW_LOCAL_BIT },
  { "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR", VK_DEPENDENCY_DEVICE_GROUP_BIT },
  
};
std::map<std::string, __int32> _VkDisplayPlaneAlphaFlagBitsKHR = {
  { "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR", 0x1 },
  { "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR", 0x2 },
  { "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR", 0x4 },
  { "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR", 0x8 },
  
};
std::map<std::string, __int32> _VkCompositeAlphaFlagBitsKHR = {
  { "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR", 0x1 },
  { "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR", 0x2 },
  { "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR", 0x4 },
  { "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR", 0x8 },
  
};
std::map<std::string, __int32> _VkSurfaceTransformFlagBitsKHR = {
  { "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR", 0x1 },
  { "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR", 0x2 },
  { "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR", 0x4 },
  { "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR", 0x8 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR", 0x10 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR", 0x20 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR", 0x40 },
  { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR", 0x80 },
  { "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR", 0x100 },
  
};
std::map<std::string, __int32> _VkDebugReportFlagBitsEXT = {
  { "VK_DEBUG_REPORT_INFORMATION_BIT_EXT", 0x1 },
  { "VK_DEBUG_REPORT_WARNING_BIT_EXT", 0x2 },
  { "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT", 0x4 },
  { "VK_DEBUG_REPORT_ERROR_BIT_EXT", 0x8 },
  { "VK_DEBUG_REPORT_DEBUG_BIT_EXT", 0x10 },
  
};
std::map<std::string, __int32> _VkExternalMemoryHandleTypeFlagBitsNV = {
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV", 0x1 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV", 0x2 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV", 0x4 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV", 0x8 },
  
};
std::map<std::string, __int32> _VkExternalMemoryFeatureFlagBitsNV = {
  { "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV", 0x1 },
  { "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV", 0x2 },
  { "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV", 0x4 },
  
};
std::map<std::string, __int32> _VkSubgroupFeatureFlagBits = {
  { "VK_SUBGROUP_FEATURE_BASIC_BIT", 0x1 },
  { "VK_SUBGROUP_FEATURE_VOTE_BIT", 0x2 },
  { "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT", 0x4 },
  { "VK_SUBGROUP_FEATURE_BALLOT_BIT", 0x8 },
  { "VK_SUBGROUP_FEATURE_SHUFFLE_BIT", 0x10 },
  { "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT", 0x20 },
  { "VK_SUBGROUP_FEATURE_CLUSTERED_BIT", 0x40 },
  { "VK_SUBGROUP_FEATURE_QUAD_BIT", 0x80 },
  { "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV", 0x100 },
  
};
std::map<std::string, __int32> _VkIndirectCommandsLayoutUsageFlagBitsNVX = {
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX", 0x1 },
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX", 0x2 },
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX", 0x4 },
  { "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX", 0x8 },
  
};
std::map<std::string, __int32> _VkObjectEntryUsageFlagBitsNVX = {
  { "VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX", 0x1 },
  { "VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX", 0x2 },
  
};
std::map<std::string, __int32> _VkDescriptorSetLayoutCreateFlagBits = {
  { "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR", 0x1 },
  { "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT", 0x2 },
  
};
std::map<std::string, __int32> _VkExternalMemoryHandleTypeFlagBits = {
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT", 0x1 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT", 0x2 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", 0x4 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT", 0x8 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT", 0x10 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT", 0x20 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT", 0x40 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR", VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT", 0x200 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID", 0x400 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT", 0x80 },
  { "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT", 0x100 },
  
};
std::map<std::string, __int32> _VkExternalMemoryFeatureFlagBits = {
  { "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT", 0x1 },
  { "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT", 0x2 },
  { "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT", 0x4 },
  { "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR", VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT },
  { "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR", VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT },
  { "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR", VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT },
  
};
std::map<std::string, __int32> _VkExternalSemaphoreHandleTypeFlagBits = {
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT", 0x1 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT", 0x2 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", 0x4 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT", 0x8 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT", 0x10 },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR", VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR", VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR", VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR", VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT },
  { "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR", VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT },
  
};
std::map<std::string, __int32> _VkExternalSemaphoreFeatureFlagBits = {
  { "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT", 0x1 },
  { "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT", 0x2 },
  { "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR", VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT },
  { "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR", VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT },
  
};
std::map<std::string, __int32> _VkSemaphoreImportFlagBits = {
  { "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT", 0x1 },
  { "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR", VK_SEMAPHORE_IMPORT_TEMPORARY_BIT },
  
};
std::map<std::string, __int32> _VkExternalFenceHandleTypeFlagBits = {
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT", 0x1 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT", 0x2 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", 0x4 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT", 0x8 },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR", VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR", VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR", VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT },
  { "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR", VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT },
  
};
std::map<std::string, __int32> _VkExternalFenceFeatureFlagBits = {
  { "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT", 0x1 },
  { "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT", 0x2 },
  { "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR", VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT },
  { "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR", VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT },
  
};
std::map<std::string, __int32> _VkFenceImportFlagBits = {
  { "VK_FENCE_IMPORT_TEMPORARY_BIT", 0x1 },
  { "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR", VK_FENCE_IMPORT_TEMPORARY_BIT },
  
};
std::map<std::string, __int32> _VkSurfaceCounterFlagBitsEXT = {
  { "VK_SURFACE_COUNTER_VBLANK_EXT", 0x1 },
  
};
std::map<std::string, __int32> _VkPeerMemoryFeatureFlagBits = {
  { "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT", 0x1 },
  { "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT", 0x2 },
  { "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT", 0x4 },
  { "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT", 0x8 },
  { "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR", VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT },
  { "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR", VK_PEER_MEMORY_FEATURE_COPY_DST_BIT },
  { "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR", VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT },
  { "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR", VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT },
  
};
std::map<std::string, __int32> _VkMemoryAllocateFlagBits = {
  { "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT", 0x1 },
  { "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR", VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT },
  
};
std::map<std::string, __int32> _VkDeviceGroupPresentModeFlagBitsKHR = {
  { "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR", 0x1 },
  { "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR", 0x2 },
  { "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR", 0x4 },
  { "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR", 0x8 },
  
};
std::map<std::string, __int32> _VkSwapchainCreateFlagBitsKHR = {
  { "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", 0x1 },
  { "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR", 0x2 },
  { "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", 0x1 },
  
};
std::map<std::string, __int32> _VkSubpassDescriptionFlagBits = {
  { "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX", 0x1 },
  { "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX", 0x2 },
  
};
std::map<std::string, __int32> _VkDebugUtilsMessageSeverityFlagBitsEXT = {
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT", 0x1 },
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT", 0x10 },
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT", 0x100 },
  { "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT", 0x1000 },
  
};
std::map<std::string, __int32> _VkDebugUtilsMessageTypeFlagBitsEXT = {
  { "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT", 0x1 },
  { "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT", 0x2 },
  { "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT", 0x4 },
  
};
std::map<std::string, __int32> _VkDescriptorBindingFlagBitsEXT = {
  { "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT", 0x1 },
  { "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT", 0x2 },
  { "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT", 0x4 },
  { "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT", 0x8 },
  
};
std::map<std::string, __int32> _VkConditionalRenderingFlagBitsEXT = {
  { "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT", 0x1 },
  
};

void getVulkanEnumerations(const Nan::FunctionCallbackInfo<v8::Value>& info) {
  v8::Local<v8::Object> out = Nan::New<v8::Object>();

  {
    std::map<std::string, std::string>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _API_Extensions_Strings.begin(); it != _API_Extensions_Strings.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), it->second.c_str()));
      out->Set(Nan::New(it->first).ToLocalChecked(), v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), it->second.c_str()));
    };
    out->Set(Nan::New("API_Extensions_Strings").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _API_Extensions.begin(); it != _API_Extensions.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("API_Extensions").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _API_Constants.begin(); it != _API_Constants.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("API_Constants").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageLayout.begin(); it != _VkImageLayout.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageLayout").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAttachmentLoadOp.begin(); it != _VkAttachmentLoadOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkAttachmentLoadOp").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAttachmentStoreOp.begin(); it != _VkAttachmentStoreOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkAttachmentStoreOp").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageType.begin(); it != _VkImageType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageTiling.begin(); it != _VkImageTiling.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageTiling").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageViewType.begin(); it != _VkImageViewType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageViewType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandBufferLevel.begin(); it != _VkCommandBufferLevel.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCommandBufferLevel").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkComponentSwizzle.begin(); it != _VkComponentSwizzle.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkComponentSwizzle").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorType.begin(); it != _VkDescriptorType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryType.begin(); it != _VkQueryType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkQueryType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBorderColor.begin(); it != _VkBorderColor.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkBorderColor").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineBindPoint.begin(); it != _VkPipelineBindPoint.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPipelineBindPoint").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineCacheHeaderVersion.begin(); it != _VkPipelineCacheHeaderVersion.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPipelineCacheHeaderVersion").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPrimitiveTopology.begin(); it != _VkPrimitiveTopology.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPrimitiveTopology").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSharingMode.begin(); it != _VkSharingMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSharingMode").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkIndexType.begin(); it != _VkIndexType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkIndexType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFilter.begin(); it != _VkFilter.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkFilter").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerMipmapMode.begin(); it != _VkSamplerMipmapMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSamplerMipmapMode").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerAddressMode.begin(); it != _VkSamplerAddressMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSamplerAddressMode").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCompareOp.begin(); it != _VkCompareOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCompareOp").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPolygonMode.begin(); it != _VkPolygonMode.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPolygonMode").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFrontFace.begin(); it != _VkFrontFace.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkFrontFace").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBlendFactor.begin(); it != _VkBlendFactor.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkBlendFactor").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBlendOp.begin(); it != _VkBlendOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkBlendOp").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkStencilOp.begin(); it != _VkStencilOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkStencilOp").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkLogicOp.begin(); it != _VkLogicOp.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkLogicOp").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkInternalAllocationType.begin(); it != _VkInternalAllocationType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkInternalAllocationType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSystemAllocationScope.begin(); it != _VkSystemAllocationScope.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSystemAllocationScope").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPhysicalDeviceType.begin(); it != _VkPhysicalDeviceType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPhysicalDeviceType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkVertexInputRate.begin(); it != _VkVertexInputRate.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkVertexInputRate").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFormat.begin(); it != _VkFormat.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkFormat").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkStructureType.begin(); it != _VkStructureType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkStructureType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSubpassContents.begin(); it != _VkSubpassContents.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSubpassContents").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkResult.begin(); it != _VkResult.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkResult").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDynamicState.begin(); it != _VkDynamicState.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDynamicState").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorUpdateTemplateType.begin(); it != _VkDescriptorUpdateTemplateType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorUpdateTemplateType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkObjectType.begin(); it != _VkObjectType.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkObjectType").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPresentModeKHR.begin(); it != _VkPresentModeKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPresentModeKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkColorSpaceKHR.begin(); it != _VkColorSpaceKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkColorSpaceKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugReportObjectTypeEXT.begin(); it != _VkDebugReportObjectTypeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDebugReportObjectTypeEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkRasterizationOrderAMD.begin(); it != _VkRasterizationOrderAMD.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkRasterizationOrderAMD").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkValidationCheckEXT.begin(); it != _VkValidationCheckEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkValidationCheckEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkIndirectCommandsTokenTypeNVX.begin(); it != _VkIndirectCommandsTokenTypeNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkIndirectCommandsTokenTypeNVX").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkObjectEntryTypeNVX.begin(); it != _VkObjectEntryTypeNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkObjectEntryTypeNVX").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDisplayPowerStateEXT.begin(); it != _VkDisplayPowerStateEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDisplayPowerStateEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDeviceEventTypeEXT.begin(); it != _VkDeviceEventTypeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDeviceEventTypeEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDisplayEventTypeEXT.begin(); it != _VkDisplayEventTypeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDisplayEventTypeEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkViewportCoordinateSwizzleNV.begin(); it != _VkViewportCoordinateSwizzleNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkViewportCoordinateSwizzleNV").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDiscardRectangleModeEXT.begin(); it != _VkDiscardRectangleModeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDiscardRectangleModeEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPointClippingBehavior.begin(); it != _VkPointClippingBehavior.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPointClippingBehavior").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerReductionModeEXT.begin(); it != _VkSamplerReductionModeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSamplerReductionModeEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkTessellationDomainOrigin.begin(); it != _VkTessellationDomainOrigin.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkTessellationDomainOrigin").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerYcbcrModelConversion.begin(); it != _VkSamplerYcbcrModelConversion.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSamplerYcbcrModelConversion").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSamplerYcbcrRange.begin(); it != _VkSamplerYcbcrRange.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSamplerYcbcrRange").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkChromaLocation.begin(); it != _VkChromaLocation.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkChromaLocation").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBlendOverlapEXT.begin(); it != _VkBlendOverlapEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkBlendOverlapEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCoverageModulationModeNV.begin(); it != _VkCoverageModulationModeNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCoverageModulationModeNV").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkValidationCacheHeaderVersionEXT.begin(); it != _VkValidationCacheHeaderVersionEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkValidationCacheHeaderVersionEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkShaderInfoTypeAMD.begin(); it != _VkShaderInfoTypeAMD.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkShaderInfoTypeAMD").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueueGlobalPriorityEXT.begin(); it != _VkQueueGlobalPriorityEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkQueueGlobalPriorityEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkConservativeRasterizationModeEXT.begin(); it != _VkConservativeRasterizationModeEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkConservativeRasterizationModeEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkVendorId.begin(); it != _VkVendorId.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkVendorId").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCullModeFlagBits.begin(); it != _VkCullModeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCullModeFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueueFlagBits.begin(); it != _VkQueueFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkQueueFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDeviceQueueCreateFlagBits.begin(); it != _VkDeviceQueueCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDeviceQueueCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkMemoryPropertyFlagBits.begin(); it != _VkMemoryPropertyFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkMemoryPropertyFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkMemoryHeapFlagBits.begin(); it != _VkMemoryHeapFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkMemoryHeapFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAccessFlagBits.begin(); it != _VkAccessFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkAccessFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBufferUsageFlagBits.begin(); it != _VkBufferUsageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkBufferUsageFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkBufferCreateFlagBits.begin(); it != _VkBufferCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkBufferCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkShaderStageFlagBits.begin(); it != _VkShaderStageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkShaderStageFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageUsageFlagBits.begin(); it != _VkImageUsageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageUsageFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageCreateFlagBits.begin(); it != _VkImageCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineCreateFlagBits.begin(); it != _VkPipelineCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPipelineCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkColorComponentFlagBits.begin(); it != _VkColorComponentFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkColorComponentFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFenceCreateFlagBits.begin(); it != _VkFenceCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkFenceCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFormatFeatureFlagBits.begin(); it != _VkFormatFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkFormatFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryControlFlagBits.begin(); it != _VkQueryControlFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkQueryControlFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryResultFlagBits.begin(); it != _VkQueryResultFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkQueryResultFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandBufferUsageFlagBits.begin(); it != _VkCommandBufferUsageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCommandBufferUsageFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkQueryPipelineStatisticFlagBits.begin(); it != _VkQueryPipelineStatisticFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkQueryPipelineStatisticFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkImageAspectFlagBits.begin(); it != _VkImageAspectFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkImageAspectFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSparseImageFormatFlagBits.begin(); it != _VkSparseImageFormatFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSparseImageFormatFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSparseMemoryBindFlagBits.begin(); it != _VkSparseMemoryBindFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSparseMemoryBindFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPipelineStageFlagBits.begin(); it != _VkPipelineStageFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPipelineStageFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandPoolCreateFlagBits.begin(); it != _VkCommandPoolCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCommandPoolCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandPoolResetFlagBits.begin(); it != _VkCommandPoolResetFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCommandPoolResetFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCommandBufferResetFlagBits.begin(); it != _VkCommandBufferResetFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCommandBufferResetFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSampleCountFlagBits.begin(); it != _VkSampleCountFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSampleCountFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkAttachmentDescriptionFlagBits.begin(); it != _VkAttachmentDescriptionFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkAttachmentDescriptionFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkStencilFaceFlagBits.begin(); it != _VkStencilFaceFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkStencilFaceFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorPoolCreateFlagBits.begin(); it != _VkDescriptorPoolCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorPoolCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDependencyFlagBits.begin(); it != _VkDependencyFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDependencyFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDisplayPlaneAlphaFlagBitsKHR.begin(); it != _VkDisplayPlaneAlphaFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDisplayPlaneAlphaFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkCompositeAlphaFlagBitsKHR.begin(); it != _VkCompositeAlphaFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkCompositeAlphaFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSurfaceTransformFlagBitsKHR.begin(); it != _VkSurfaceTransformFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSurfaceTransformFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugReportFlagBitsEXT.begin(); it != _VkDebugReportFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDebugReportFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryHandleTypeFlagBitsNV.begin(); it != _VkExternalMemoryHandleTypeFlagBitsNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryHandleTypeFlagBitsNV").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryFeatureFlagBitsNV.begin(); it != _VkExternalMemoryFeatureFlagBitsNV.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryFeatureFlagBitsNV").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSubgroupFeatureFlagBits.begin(); it != _VkSubgroupFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSubgroupFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkIndirectCommandsLayoutUsageFlagBitsNVX.begin(); it != _VkIndirectCommandsLayoutUsageFlagBitsNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkIndirectCommandsLayoutUsageFlagBitsNVX").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkObjectEntryUsageFlagBitsNVX.begin(); it != _VkObjectEntryUsageFlagBitsNVX.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkObjectEntryUsageFlagBitsNVX").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorSetLayoutCreateFlagBits.begin(); it != _VkDescriptorSetLayoutCreateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorSetLayoutCreateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryHandleTypeFlagBits.begin(); it != _VkExternalMemoryHandleTypeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryHandleTypeFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalMemoryFeatureFlagBits.begin(); it != _VkExternalMemoryFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalMemoryFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalSemaphoreHandleTypeFlagBits.begin(); it != _VkExternalSemaphoreHandleTypeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalSemaphoreHandleTypeFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalSemaphoreFeatureFlagBits.begin(); it != _VkExternalSemaphoreFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalSemaphoreFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSemaphoreImportFlagBits.begin(); it != _VkSemaphoreImportFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSemaphoreImportFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalFenceHandleTypeFlagBits.begin(); it != _VkExternalFenceHandleTypeFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalFenceHandleTypeFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkExternalFenceFeatureFlagBits.begin(); it != _VkExternalFenceFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkExternalFenceFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkFenceImportFlagBits.begin(); it != _VkFenceImportFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkFenceImportFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSurfaceCounterFlagBitsEXT.begin(); it != _VkSurfaceCounterFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSurfaceCounterFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkPeerMemoryFeatureFlagBits.begin(); it != _VkPeerMemoryFeatureFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkPeerMemoryFeatureFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkMemoryAllocateFlagBits.begin(); it != _VkMemoryAllocateFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkMemoryAllocateFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDeviceGroupPresentModeFlagBitsKHR.begin(); it != _VkDeviceGroupPresentModeFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDeviceGroupPresentModeFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSwapchainCreateFlagBitsKHR.begin(); it != _VkSwapchainCreateFlagBitsKHR.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSwapchainCreateFlagBitsKHR").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkSubpassDescriptionFlagBits.begin(); it != _VkSubpassDescriptionFlagBits.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkSubpassDescriptionFlagBits").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugUtilsMessageSeverityFlagBitsEXT.begin(); it != _VkDebugUtilsMessageSeverityFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDebugUtilsMessageSeverityFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDebugUtilsMessageTypeFlagBitsEXT.begin(); it != _VkDebugUtilsMessageTypeFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDebugUtilsMessageTypeFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkDescriptorBindingFlagBitsEXT.begin(); it != _VkDescriptorBindingFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkDescriptorBindingFlagBitsEXT").ToLocalChecked(), entry);
  }
  {
    std::map<std::string, __int32>::iterator it;
    v8::Local<v8::Object> entry = Nan::New<v8::Object>();
    for (it = _VkConditionalRenderingFlagBitsEXT.begin(); it != _VkConditionalRenderingFlagBitsEXT.end(); it++) {
      entry->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
      out->Set(Nan::New(it->first).ToLocalChecked(), Nan::New(static_cast<__int32>(it->second)));
    };
    out->Set(Nan::New("VkConditionalRenderingFlagBitsEXT").ToLocalChecked(), entry);
  }
  
  info.GetReturnValue().Set(out);
};

#endif
