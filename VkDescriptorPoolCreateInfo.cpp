/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkDescriptorPoolCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkDescriptorPoolCreateInfo::constructor;

_VkDescriptorPoolCreateInfo::_VkDescriptorPoolCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
}

_VkDescriptorPoolCreateInfo::~_VkDescriptorPoolCreateInfo() {
  //printf("VkDescriptorPoolCreateInfo deconstructed!!\n");
}

void _VkDescriptorPoolCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkDescriptorPoolCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkDescriptorPoolCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("maxSets").ToLocalChecked(), GetmaxSets, SetmaxSets, ctor);
  SetPrototypeAccessor(proto, Nan::New("poolSizeCount").ToLocalChecked(), GetpoolSizeCount, SetpoolSizeCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pPoolSizes").ToLocalChecked(), GetpPoolSizes, SetpPoolSizes, ctor);
  Nan::Set(target, Nan::New("VkDescriptorPoolCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkDescriptorPoolCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkDescriptorPoolCreateInfo* self = new _VkDescriptorPoolCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("maxSets").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("poolSizeCount").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("pPoolSizes").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkDescriptorPoolCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkDescriptorPoolCreateInfo::GetsType) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkDescriptorPoolCreateInfo::SetsType) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkDescriptorPoolCreateInfo::Getflags) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkDescriptorPoolCreateInfo::Setflags) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  self->instance.flags = static_cast<VkDescriptorPoolCreateFlags>((int32_t)value->NumberValue());
}// maxSets
NAN_GETTER(_VkDescriptorPoolCreateInfo::GetmaxSets) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.maxSets));
}NAN_SETTER(_VkDescriptorPoolCreateInfo::SetmaxSets) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  self->instance.maxSets = static_cast<uint32_t>(value->NumberValue());
}// poolSizeCount
NAN_GETTER(_VkDescriptorPoolCreateInfo::GetpoolSizeCount) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.poolSizeCount));
}NAN_SETTER(_VkDescriptorPoolCreateInfo::SetpoolSizeCount) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  self->instance.poolSizeCount = static_cast<uint32_t>(value->NumberValue());
}// pPoolSizes
NAN_GETTER(_VkDescriptorPoolCreateInfo::GetpPoolSizes) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  if (self->pPoolSizes.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pPoolSizes);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkDescriptorPoolCreateInfo::SetpPoolSizes) {
  _VkDescriptorPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkDescriptorPoolCreateInfo>(info.This());
  
    // js
    if (value->IsArray() || value->IsArrayBufferView()) {
      v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(value);
      Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> obj(arr);
      self->pPoolSizes = obj;
    } else {
      if (!self->pPoolSizes.IsEmpty()) self->pPoolSizes.Empty();
    }
  
  // vulkan
  if (!(value->IsNull())) {
    self->instance.pPoolSizes = copyArrayOfV8Objects<VkDescriptorPoolSize, _VkDescriptorPoolSize>(value);
  } else {
    self->instance.pPoolSizes = nullptr;
  }
}