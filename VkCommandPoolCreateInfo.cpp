/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkCommandPoolCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkCommandPoolCreateInfo::constructor;

_VkCommandPoolCreateInfo::_VkCommandPoolCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
}

_VkCommandPoolCreateInfo::~_VkCommandPoolCreateInfo() {
  //printf("VkCommandPoolCreateInfo deconstructed!!\n");
}

void _VkCommandPoolCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkCommandPoolCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkCommandPoolCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("queueFamilyIndex").ToLocalChecked(), GetqueueFamilyIndex, SetqueueFamilyIndex, ctor);
  Nan::Set(target, Nan::New("VkCommandPoolCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkCommandPoolCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkCommandPoolCreateInfo* self = new _VkCommandPoolCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("queueFamilyIndex").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkCommandPoolCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkCommandPoolCreateInfo::GetsType) {
  _VkCommandPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkCommandPoolCreateInfo::SetsType) {
  _VkCommandPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandPoolCreateInfo>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkCommandPoolCreateInfo::Getflags) {
  _VkCommandPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkCommandPoolCreateInfo::Setflags) {
  _VkCommandPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandPoolCreateInfo>(info.This());
  self->instance.flags = static_cast<VkCommandPoolCreateFlags>((int32_t)value->NumberValue());
}// queueFamilyIndex
NAN_GETTER(_VkCommandPoolCreateInfo::GetqueueFamilyIndex) {
  _VkCommandPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandPoolCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.queueFamilyIndex));
}NAN_SETTER(_VkCommandPoolCreateInfo::SetqueueFamilyIndex) {
  _VkCommandPoolCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkCommandPoolCreateInfo>(info.This());
  self->instance.queueFamilyIndex = static_cast<uint32_t>(value->NumberValue());
}